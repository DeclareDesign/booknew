[
["index.html", "Research Design: Declare, Diagnose, Redesign Welcome", " Research Design: Declare, Diagnose, Redesign Graeme Blair, Jasper Cooper, Alexander Coppock, and Macartan Humphreys Welcome Draft book manuscript. Comments welcomed. Please treat with caution. © 2019 Graeme Blair, Jasper Cooper, Alexander Coppock, and Macartan Humphreys "],
["preamble.html", "Chapter 1 Preamble", " Chapter 1 Preamble With this book, we hope to promote a new, comprehensive way of thinking about research designs in the social sciences. We hope this way of thinking will make research designs more transparent and more robust. But we also hope it will make research design easier, easier to produce good designs, but also easier to share designs and build off of the designs that others have developed. The core idea is to start think of a design as an object that can be interrogated. The design encodes your beliefs about the world, it describes your questions, and it lays out how you go about answering those questions, in terms both of what data you use and how you use it. A key idea is that all of these features can be provided in code and if done right the information provided is enough to be able to simulate a run of the design and assess its properties. For a researcher, being able to simulate a design puts you in a powerful position as you can then start assessing the conditions under which a design perfoms well or badly. For a reader, a complete declaration lets you quickly examine the analytic core of a design. As you work through designs in this book we hope you will develop a nose for quickly parsing what goes in the model, what are the kinds of inquiries you should expect to see, what are the data strategies, what are analysis strategies, and how these all link together. "],
["mida.html", "Chapter 2 MIDA", " Chapter 2 MIDA Research designs are procedures we apply to the world in order to learn about it. Selecting strong research designs requires us to understand the properties of those procedures in terms of their ability to generate credible answers to theoretically important questions. Our understanding of research designs is rooted in the “MIDA” framework. MIDA stands for “model,” “inquiry,” “data strategy,” and “answer strategy.” Loosely speaking, the model is how we imagine the world and the inquiry is the question we want to answer about the world, given how we imagine it. The data strategy includes all the processes by which we obtain information from the world and the answer strategy includes everything we do with that information in order to generate an answer to the question. If you can describe and understand these four parts of a design, you can characterize whether the design is a good one. We think this framework applies to nearly every kind of empirical research strategy: qualitative and quantitative, observational and experimental, descriptive and causal. We hope to convince you that even though the framework is very broad and can help to illuminate many empirical approaches, it is not so flexible as to be meaningless. Understanding the distinctions and connections across these four dimensions can help sharpen and refine our procedures in order to produce better research in the future than we have done in the past. The first two components of a design – the model and the inquiry – are theoretical. The model of the world that is in researchers minds may correspond to the real world more or less well, but the model is certainly not the same thing as the real world. The model simplifies the world into kinds of units, types of measurements, and beliefs about causal relationships. Models can be more or less specific. They are what is represented in the “theory” section of empirical research papers. While it may seem like empirical research is entirely agnostic and model-free, this is not so. In order to understand what the variables in a dataset even mean, researchers have to bring to bear background beliefs about the meanings of and interrelations between pieces of information. A key part of many research design processes is revealing how assumptions about the world are part of researchers’ implicit theoretical models of the world. The inquiry is a question expressed in terms of the model. Because the inquiry can only be expressed in model terms, it is also theoretical. If the model specifies that there are two kinds of people (people who are women and people who are not women) and that all people have heights, then we can ask questions like what is the median height of all people? What is the mean height of people who are women? What is the average difference in heights between those who are women and those who are not? Without concepts like “woman” and “height” that are part of the model, we cannot specify an inquiry. By contrast, the second two components of a research design - the data strategy and answer strategy - take place in the real world and are not theoretical. The data strategy describes how the research will obtain new information, so includes choices like case selection, sampling procedures, randomization protocols, questionaire design, participant observation techniques, and the like. The answer strategy is how you process the new information. The answer strategy is more than just the choice of estimator – it’s the full set of choices that map the data into the table and figures in the report. For quantitative designs, these choices include how “raw data” are processed into “clean data,” which estimators will be applied, and which results will be presented. For qualitative designs, the answer strategy includes procedures for summarizing interviews, field notes, or original source documents. These four components correspond to how we imagine the world; given how we imagine the world, the questions we want answer about it; Interviews, surveys, case studies, randomized experiments, laboratory games, [etc], are all research designs All empirical research designs gather and analyze information in order to answer a question about the world, stated in terms of a background model. These four features form the basis of the “MIDA” framework that we will rely on to describe designs. Formally, we defined a causal , \\(M\\), of how the world works, following Pearl’s definition of a probabilistic causal model . A casual model itself is made up of three components: The variables \\(X\\) and their ranges. The variables in \\(X\\) can themselves be partitioned into endogenous (\\(V\\)) and exogenous (\\(U\\)) variables. The functional relationships (\\(F\\)) between variables. The functional relationships describe how each variable in the model does or does not causally affect the others. Sometimes these functional relationships are described by potential outcomes functions. A probability distribution over the exogenous variables, \\(P(U)\\). Many features of a probabalistic causal model can be encoded in a Directed Acyclic Graph, or DAG. It shows the variables and the presence or absence of functional relationships between variables. It does not encode the functional forms of those relationships or even the strength of the causal effect. It is difficult to represent heterogeneity on a DAG. The DAG does not show the \\(P(U)\\). The inquiry generates the answer-under-the-model, or \\(a^M\\). "],
["model-inquiry-data-strategy-model-strategy.html", "2.1 Model-Inquiry-Data Strategy-Model Strategy", " 2.1 Model-Inquiry-Data Strategy-Model Strategy The specification of a problem requires a description of the world and the question to be asked about the world as described. The answering requires a description of what information is used and how conclusions are reached given the information. At its most basic we think of a research design, \\(\\Delta\\), as including four elements \\(&lt;M,I,D,A&gt;\\): A , \\(M\\), of how the world works. In general following Pearl’s definition of a probabilistic causal model we will assume that a model contains three core elements. First, a specification of the variables \\(X\\) about which research is being conducted. This includes endogenous and exogenous variables (\\(V\\) and \\(U\\) respectively) and the ranges of these variables. In the formal literature this is sometimes called the of a model (Halpern 2000). Second, a specification of how each endogenous variable depends on other variables (the functional relations'' or, as in @Imbens2015,potential outcomes’’), \\(F\\). Third, a probability distribution over exogenous variables, \\(P(U)\\). An , \\(I\\), about the distribution of variables, \\(X\\), perhaps given interventions on some variables. Using Pearl’s notation we can distinguish between questions that ask about the conditional values of variables, such as \\(\\Pr(X_1 | X_2 =1)\\) and questions that ask about values that would arise under interventions: \\(\\Pr(X_1 | do(X_2 = 1))\\). We let \\(a^M\\) denote the answer to \\(I\\) . Conditional on the model, \\(a^M\\) is the value of the estimand, the quantity that the researcher wants to learn about. A strategy, \\(D\\), generates data \\(d\\) on \\(X\\). Data \\(d\\) arises, under model \\(M\\) with probability \\(P_M(d|D)\\). The data strategy includes sampling strategies and assignment strategies, which we denote with \\(P_S\\) and \\(P_Z\\) respectively. Measurement techniques are also a part of data strategies and can be thought of as a selection of observable variables that carry information about unobservable variables. An answer strategy, \\(A\\), that generates answer \\(a^A\\) using data \\(d\\). A key feature of this bare specification is that if \\(M\\), \\(D\\), and \\(A\\) are sufficiently well described, the answer to question \\(I\\) has a distribution \\(P_M(a^A|D)\\). Moreover, one can construct a distribution of comparisons of this answer to the correct answer, under \\(M\\), for example by assessing \\(P_M(a^M-a^A|D)\\). One can also compare this to results under different data or analysis strategies, \\(P_M(a^M-a^A|D&#39;)\\) and \\(P_M(a^M-a^{A&#39;}|D)\\), and to answers generated under alternative models, \\(P_M(a^{M&#39;}-a^{A}|D)\\), as long as these possess signatures that are consistent with inquiries and answer strategies. MIDA captures the analysis-relevant features of a design, but it does not describe substantive elements, such as how theories are derived or interventions are implemented. Yet many other aspects of a design that are not explicitly labeled in these features enter into this framework if they are analytically relevant. For example, logistical details of data collection such as the duration of time between a treatment being administered and endline data collection enter into the model if the longer time until data collection affects subject recall of the treatment. However, information in {} is typically insufficient to assess those substantive elements, an important and separate part of assessing the quality of a research study. References "],
["diagnosands-and-diagnosis.html", "2.2 Diagnosands and diagnosis", " 2.2 Diagnosands and diagnosis The ability to calculate distributions of answers, given a model, opens multiple avenues for assessment and critique. How good is the answer you expect to get from a given strategy? Would you do better, given some desideratum, with a different data strategy? With a different analysis strategy? How good is the strategy if the model is wrong in some way or another? To allow for this kind of diagnosis of a design, we introduce two further concepts, both functions of research designs. These are quantities that a researcher or a third party could calculate with respect to a design. A {} is a summary statistic generated from a “run” of a design—that is, the results given a possible realization of variables, given the model and data strategy. A diagnostic statistic may or may not depend on the model as well as realized data. For example the statistic: \\(e=\\) “difference between the estimated and the actual average treatment effect” depends on the model (since the ATE depends on the model’s assumptions about potential outcomes). The statistic \\(s = \\mathbb{1}(p \\leq 0.05)\\), interpreted as “the result is considered statistically significant at the 5% level”,’’ does not depend on the model but it does presuppose an answer strategy that reports a \\(p\\) value. Diagnostic statistics are governed by probability distributions that arise because both the model and the data generation, given the model, may be stochastic. A Diagnosand is a summary of the distribution of a diagnostic statistic. For example, (expected) in the estimated treatment effect is \\(\\mathbb{E}(e)\\) and statistical is \\(\\mathbb{E}(s)\\). To illustrate, consider the following design. A model M specifies three variables \\(X\\), \\(Y\\) and \\(Z\\) (all defined on the reals). These form the signature. In additional we assume functional relationships between them that allow for the possibility of confounding (for example, \\(Y = bX + Z + \\epsilon_Y; X = Z+ \\epsilon_X\\), with \\(Z, \\epsilon_X, \\epsilon_Z\\) distributed standard normal). The inquiry \\(I\\) is ``what would be the average effect of a unit increase in \\(X\\) on \\(Y\\) in the population?’’ Note that this question depends on the signature of the model, but not the functional equations of the model (the answer provided by the model does of course depend on the functional equations). Consider now a data strategy, \\(D\\), in which data is gathered on \\(X\\) and \\(Y\\) for \\(n\\) randomly selected units. An answer \\(a^A\\), is then generated using ordinary least squares as the answer strategy, \\(A\\). We have specified all the components of MIDA. We now ask: How strong is this research design? One way to answer this question is with respect to the diagnosand “expected error.” Here the model’s functional equations provide an answer, \\(a^M\\) to the inquiry (for any draw of \\(\\beta\\)), and so the distribution of the expected error, given the model, \\(a^A-a^M\\), can be calculated. In this example the expected performance of the design may be poor, as measured by this diagnosand, because the data and analysis strategy do not handle the confounding described by the model. In comparison, better performance may be achieved through an alternative data strategy (e.g., where \\(D&#39;\\) randomly assigned \\(X\\) to \\(n\\) units before recording \\(X\\) and \\(Y\\)) or an alternative analysis strategy (e.g., \\(A&#39;\\) conditions on \\(Z\\)). These design evaluations depend on the model, and so one might reasonably ask how performance would look were the model different (for example if the underlying process involved nonlinearities). In all cases, the evaluation of a design depends on the assessment of a diagnosand, and comparing the diagnoses to what could be achieved under alternative designs. In section X we discuss possible choices of diagnosands and operate a set of these "],
["what-is-a-complete-design-declaration.html", "2.3 What is a Complete Design Declaration?", " 2.3 What is a Complete Design Declaration? A declaration of a research design that is in some sense complete is required in order to implement it, communicate its essential features, and to assess its properties. Yet existing definitions make clear that there is no single conception of a complete research design: the Consolidated Standards of Reporting Trials (CONSORT) Statement widely used in medicine includes 22 features and other proposals range from nine to 60 components. We propose a conditional notion of completeness: we say a design is ``diagnosand-complete’’ for a given diagnosand if that diagnosand can be calculated from the declared design. Thus a design that is diagnosand complete for one diagnosand may not be for another. Consider for example the diagnosand statistical power. Power is the probability that a p-value is lower than a critical value. Thus, power-completeness requires that the answer strategy return a p value. It does not, however, require a well-defined estimand. In contrast, Bias- or RMSE-completeness does not require a hypothesis test, but does require the specification of an estimand. Diagnosand-completeness is a desirable property to the extent that it means a diagnosand can be calculated. How useful this is depends however on how useful the diagnosand is for decision making. Thus evaluating completeness should focus first on whether diagnosands for which completeness holds are indeed useful ones. This usefulness depends in part on whether the information on which diagnoses are made is believable. A design may be bias-complete for instance under the assumptions of a particular spillover structure, for example. Readers may disagree with these assumptions but there are still gains from the declaration as the grounds for claims for unbiasedness are clear and the effects of deviations from model assumptions can be assessed. In practice, different research communities set different standards for what constitutes sufficient information to make such conjectures about the world plausible. "],
["declaration-diagnosis-redesign.html", "2.4 Declaration-Diagnosis-Redesign", " 2.4 Declaration-Diagnosis-Redesign "],
["software-primer.html", "Chapter 3 Software primer", " Chapter 3 Software primer You can implement the MIDA framework in any software package. Indeed, a design could be declared in writing or mathematical notation and then diagnosed using analytical formula.1 Social scientists use a number of tools for conducting statistical analysis: Stata, R, Python, Julia, SPSS, SAS, Mathematica, and more. Stata and R are most commonly used. We wrote DeclareDesign in the R statistical environment because of the availability of other tools for implementing research designs and because it is free-to-use. We have designed the rest of the book so that it can be read even if you do not use R, but you will have to translate the code into your own language of choice. On our Web site, we have a translation of core parts of the declaration and diagnosis process into Stata, Python, and Excel. In this section, we introduce you to DeclareDesign for R and how each step of the design-diagnose-redesign process can be implemented in it. However, we suggested in Section XX why analytical diagnoses may not be ideal for typical designs in the social sciences: they do not account for the specific features of research designs such as varying numbers of units per cluster and the interaction of choices about a data strategy and an answer strategy.↩ "],
["installing-r.html", "3.1 Installing R", " 3.1 Installing R This book relies on the statistical computing environment R, which you can download for free from CRAN. We also recommend the free program RStudio, which provides a friendly interface to R.2 Once you’ve got RStudio installed, open it up and install DeclareDesign and its related packages. These include three packages that enable specific steps in the research process (fabricatr for simulating social science data; randomizr, for random sampling and random assignment; and estimatr for design-based estimators). You can also install DesignLibrary, which gets standard designs up-and-running in one line. To install them, you can type: install.packages(c(&quot;DeclareDesign&quot;, &quot;fabricatr&quot;, &quot;randomizr&quot;, &quot;estimatr&quot;, &quot;DesignLibrary&quot;)) We also recommend you install and get to know the tidyverse suite of packages for data analysis, which we will use throughout the book: install.packages(&quot;tidyverse&quot;) In this chapter, we will introduce the DeclareDesign software and how to implement the MIDA framework within it. We will not provide a general introduction to R or to the tidyverse, because there are already many terrific introductions. We especially recommend R for Data Science, available for free on the Web. Both R and RStudio are available on Windows, Mac, and Linux.↩ "],
["where-we-are-going.html", "3.2 Where we are going", " 3.2 Where we are going We will build up to declaring and diagnosing a design in this section. But to get a sense of the goal, below is a simple 100-unit randomized experiment design declared, diagnosed, and redesigned. 3.2.1 Declaring a design # we should turn this into a picture labeling MIDA simple_design &lt;- # M: model # a 100-unit population with an unobserved shock &#39;e&#39; declare_population(N = 100, u = rnorm(N)) + # two potential outcomes, Y_Z_0 and Y_Z_1 # Y_Z_0 is the control potential outcome (what would happen if the unit is untreated) # it is equal to the unobserved shock &#39;u&#39; # Y_Z_1 is the treated potential outcome # it is equal to the control potential outcome plus a treatment effect of 0.25 declare_potential_outcomes(Y_Z_0 = u, Y_Z_1 = Y_Z_0 + 0.25) + # I: inquiry # we are interested in the average treatment effect in the population (PATE) declare_estimand(PATE = mean(Y_Z_1 - Y_Z_0)) + # D: data strategy # sampling: we randomly sample 50 of the 100 units in the population declare_sampling(n = 50) + # assignment: we randomly assign half of the 50 sampled units to treatment (half to control) declare_assignment(prob = 0.5) + # reveal outcomes: construct outcomes from the potential outcomes named Y depending on # the realized value of their assignment variable named Z declare_reveal(outcome_variables = Y, assignment_variables = Z) + # A: answer strategy # calculate the difference-in-means of Y depending on Z # we link this estimator to PATE because this is our estimate of our inquiry declare_estimator(Y ~ Z, model = difference_in_means, estimand = &quot;PATE&quot;) 3.2.2 Diagnosis To diagnose the design, we first define a set of diagnosands (see Section XX), which are statistical properties of the design. In this case, we select the bias (difference between the estimate and the estimand, which is the PATE); the root mean-squared error; and the statistical power of the design. # Select diagnosands simple_design_diagnosands &lt;- declare_diagnosands(select = c(bias, rmse, power)) We then diagnose the design, which involves simulating the design and again and again, and then calculate the diagnosands based on the simulations data. # Diagnose the design simple_design_diagnosis &lt;- diagnose_design(simple_design, diagnosands = simple_design_diagnosands, sims = 500) estimand_label estimator_label bias rmse power PATE estimator -0.0020108 0.2912167 0.146 3.2.3 Redesign We see that the power of the design is small, so we increase the number of sampled units from 50 to 100. replace_step creates a new design, swapping out the fourth step (sampling) for a modified sampling step. redesigned_simple_design &lt;- replace_step(simple_design, step = 4, new_step = declare_sampling(n = 100)) With the big picture of the declaration, diagnosis, and redesign of a simple design in mind, we now turn to building up from a single step to a full declared design. "],
["building-a-step-of-a-research-design.html", "3.3 Building a step of a research design", " 3.3 Building a step of a research design We begin learning about how to build a research design in DeclareDesign by declaring a single step: random assignment. We take as a starting point a fixed set of data, describing a set of voters in Los Angeles. The research project we are planning involves randomly assigning voters to receive a knock on their door from a canvasser (or not to receive a door knock). Our data look like this: ID age sex party precinct 001 62 F DEM 7356 002 69 M REP 8304 003 46 M GRN 6938 004 57 M GRN 2962 005 26 M GRN 2786 006 58 F DEM 7684 There are 100 voters in the dataset. 3.3.1 Using dplyr We plan to randomly assign 50 of the voters to treatment (door knock) and 50 to control (no door knock). We want to create an indicator variable Z, where 1 represents treatment and 0 control. In order to do this, we use R’s sample function: voter_file &lt;- voter_file %&gt;% mutate(Z = sample(c(0, 1), size = 100, replace = TRUE, prob = c(0.5, 0.5))) This says: draw a random sample with replacement 100 times (the number of voters) of 0’s and 1’s with probability 0.5 each. Recall that the %&gt;% operator sends a data frame to the dplyr verb mutate, which can add new columns to a data frame. This is a short dplyr “pipeline.”3 (See chapter XX of R4DS for an introduction.) Now our data frame voter_file includes the Z indicator: ID age sex party precinct Z 001 62 F DEM 7356 1 002 69 M REP 8304 0 003 46 M GRN 6938 1 004 57 M GRN 2962 1 005 26 M GRN 2786 0 006 58 F DEM 7684 0 We can make things a bit easier with the randomizr package, which includes common random assignment functions including simple random assignment used here (see Chapter XX for a description of common kinds of random assignment). You can instead write: voter_file &lt;- voter_file %&gt;% mutate(Z = simple_ra(N = 100, prob = 0.5)) We might use this dplyr pipeline to actually implement the random assignment for a study. But to diagnose the properties of a research design, we want to know what would happen under any possible random assignment. To do this, we will need to run the assignment step over and over again and save the results. 3.3.2 As a function To simulate the design in order to diagnose it, we need to turn the assignment step into a function. The function can then be run again and again, each time resulting in a different random assignment. In DeclareDesign, we are going to use a special kind of function: a tidy function, which takes in a data frame and returns back out a data frame. The new data frame may have an additional variable (such as a random assignment) or it may have fewer rows (due to sampling, for example). For our random assignment step, we want to create a tidy function that adds our assignment indicator Z to the data, but leaves it otherwise unchanged. We write: simple_random_assignment_function &lt;- function(data) { data %&gt;% mutate(Z = simple_ra(N = 100, prob = 0.5)) } We took the dplyr pipeline we built above, and put it on the inside of a tidy function. Now, when we run our random assignment function on the voter file, it adds in Z: simple_random_assignment_function(voter_file) ID age sex party precinct Z 001 62 F DEM 7356 0 002 69 M REP 8304 1 003 46 M GRN 6938 1 004 57 M GRN 2962 1 005 26 M GRN 2786 0 006 58 F DEM 7684 1 3.3.3 In DeclareDesign DeclareDesign makes writing each design step just a bit easier. Instead of writing a function each time, it writes a function for us. The core of DeclareDesign is a set of declare_* functions, including declare_assignment. Each one is a function factory, meaning it takes a set of parameters about your research design like the number of units and the random assignment probability as inputs, and returns a function as an output. Instead of writing the function simple_random_assignment_function as we did above, in DeclareDesign we declare it: simple_random_assignment_step &lt;- declare_assignment(prob = 0.5) simple_random_assignment_step is a tidy function. You can run the function on data: simple_random_assignment_step(voter_file) ID age sex party precinct Z Z_cond_prob 001 62 F DEM 7356 1 0.5 002 69 M REP 8304 0 0.5 003 46 M GRN 6938 0 0.5 004 57 M GRN 2962 0 0.5 005 26 M GRN 2786 0 0.5 006 58 F DEM 7684 0 0.5 A few parts of the declaration may seem a little bit odd. First, we did not tell R anything about the number of units in our dataset, as we did in the function and in the dplyr pipeline we wrote earlier. Second, we didn’t give it the data! This is because a step declaration creates a function that will work on any size dataset. We told declare_assignment that we want to assign treatment with probability 0.5 (and implicitly control with probability 1-0.5 = 0.5), regardless of how large the dataset is. We did not send the declaration the data, because declare_assignment automatically creates a tidy function for us, one that takes data and returns data with an assignment step. We will see in a moment how DeclareDesign uses these functions to simulate data from a research design. But you can always use the function yourself with your own data. In Chapter XX we describe how to implement your research design after you have conducted it, using the exact same functions you diagnosed the design with. This is one of the reasons we declare the assignment step — because we’ll learn about the properties of your design with the same code you can actually use to randomly assign treatment. Every step of a research design in MIDA can be written using one of the declare_* functions. In the next section, we walk through each step and how to declare it using DeclareDesign. This pipeline could be expressed in base R as voter_file$Z &lt;- sample(c(0, 1), size = 100, replace = TRUE, prob = c(0.5, 0.5))↩ "],
["research-design-steps.html", "3.4 Research design steps", " 3.4 Research design steps In this section, we walk through how to declare each step of a research design using DeclareDesign. In the next section, we build those steps into a research design, and then describe how to interrogate the design. 3.4.1 Model The model defines the structure of the world, both its size and background characteristics as well as how interventions in the world determine outcomes. In DeclareDesign, we split the model into two main design steps: the population and potential outcomes. There is always one population in a design, but there can be multiple sets of potential outcomes. 3.4.1.1 Population The population defines the number of units in the population, any multilevel structure to the data, and its background characteristics. We can define the population in several ways. In some cases, you may start a design with data on the population. When that happens, we do not to simulate it. We can simply declare the data as our population: declare_population(data = voter_file) ID age sex party precinct Z 001 62 F DEM 7356 1 002 69 M REP 8304 1 003 46 M GRN 6938 0 004 57 M GRN 2962 0 005 26 M GRN 2786 0 006 58 F DEM 7684 0 When we do not have complete data on the population, we simulate it. Relying on the data simulation functions from our fabricatr package, declare_population asks about the size and variables of the population: declare_population(N = 100, u = rnorm(N)) When we run the declared population function, we will get a different 100-unit dataset each time: ID u 001 1.4839998 002 0.8988917 003 -3.0057350 004 0.6757503 005 0.1079058 006 0.4559339 ID u 001 0.0649905 002 2.9407238 003 1.1198547 004 0.7876097 005 0.6407764 006 -0.7365158 ID u 001 -0.9435118 002 0.3627679 003 -0.1230749 004 -0.7747122 005 -0.4691835 006 0.2481613 The fabricatr package can simulate data for social science research including multilevel data structures like students in classrooms in schools. You can read the fabricatr Web site to get started simulating your data structure (link). A simple two-level data structure of individuals within households could be declared as: declare_population( households = add_level(N = 100, individuals_per_hh = sample(1:10, N, replace = TRUE)), individuals = add_level(N = individuals_per_hh, age = sample(1:100, N, replace = TRUE)) ) In every step of the research design process, you can short-circuit our default way of doing things and bring in your own code. This is useful when you have a complex design, or when you’ve already written code for your design and you want to use it directly. It works by setting the handler: complex_population_function &lt;- function(data, N_units) { data.frame(u = rnorm(N_units)) } declare_population(handler = complex_population_function, N_units = 100) 3.4.1.2 Potential outcomes Defining potential outcomes is as easy as a single expression per potential outcome. These may be a function of background characteristics, other potential outcomes, or other R functions.4 declare_potential_outcomes( Y_Z_0 = u, Y_Z_1 = Y_Z_0 + 0.25) des &lt;- declare_population(N = 100, u = rnorm(N)) + declare_potential_outcomes(Y_Z_0 = u, Y_Z_1 = Y_Z_0 + 0.25) draw_data(des) ID u Y_Z_0 Y_Z_1 001 -0.1311790 -0.1311790 0.1188210 002 1.1011911 1.1011911 1.3511911 003 0.8472447 0.8472447 1.0972447 004 0.9038887 0.9038887 1.1538887 005 0.1506122 0.1506122 0.4006122 006 -1.8921664 -1.8921664 -1.6421664 We also have a simpler interface to define all the potential outcomes at once as a function of a treatment assignment variable. The names of the potential outcomes are constructed from the outcome name (here Y on the lefthand side of the formula) and from the assignment_variables argument (here Z). declare_potential_outcomes(Y ~ u + 0.25 * Z, assignment_variables = Z) Either way of creating potential outcomes works; one may be easier or harder to code up in a given research design setting. 3.4.2 Inquiry To define your inquiry, declare your estimand, which is a function of background characteristics from your population, potential outcomes, or both. We define the average treatment effect for the experiment in our simple design as follows: declare_estimand(PATE = mean(Y_Z_1 - Y_Z_0)) Notice that we defined the PATE (the population average treatment effect), but said nothing special related to the population. In fact, it looks like we just defined the average treatment effect. This is because where you define the estimand in your design is going to determine whether it refers to the population, sample, or other form of estimand. We will see how to do this in a moment. 3.4.3 Data strategy The data strategy constitutes one or more steps representing interventions the researcher makes in the world from sampling to assignment to measurement. Typically, this may include sampling and assignment. 3.4.3.1 Sampling The sampling step relies on the randomizr package to conduct random sampling. See Section XX for an overview of the many kinds of sampling that are possible. We define a simple 50-unit sample from the population as follows: declare_sampling(n = 50) When we draw data from our simple design at this point, it will be smaller: from 100 units in the population to a data frame of 50 units representing the sample. In the data frame, we have an inclusion probability, the probability of being included in the sample. randomizr includes this by default. In this case, every unit in the population had an equal 0.5 probability of inclusion. ID u Y_Z_0 Y_Z_1 S_inclusion_prob 1 001 0.4060859 0.4060859 0.6560859 0.5 3 003 0.4240589 0.4240589 0.6740589 0.5 4 004 0.9057319 0.9057319 1.1557319 0.5 6 006 0.8445427 0.8445427 1.0945427 0.5 7 007 0.3581438 0.3581438 0.6081438 0.5 14 014 0.7424037 0.7424037 0.9924037 0.5 Sampling could also be non-random, which could be accomplished by using a handler. 3.4.3.2 Assignment Assignment also relies, by default, on the randomizr package for random assignment. Here, we define assignment as a 50% probability of assignment to treatment and 50% to control. declare_assignment(prob = 0.5) Assignment results in a data frame with an additional indicator Z of the assignment as well as the probability of assignment. Again, here the assignment probabilities are constant, but in other designs described in Section XX they are not and this is crucial information for the analysis stage. ID u Y_Z_0 Y_Z_1 S_inclusion_prob Z Z_cond_prob 001 -0.3199756 -0.3199756 -0.0699756 0.5 1 0.5 005 0.3980988 0.3980988 0.6480988 0.5 1 0.5 006 0.2591110 0.2591110 0.5091110 0.5 0 0.5 007 0.0237138 0.0237138 0.2737138 0.5 0 0.5 011 1.0837829 1.0837829 1.3337829 0.5 0 0.5 013 0.9040428 0.9040428 1.1540428 0.5 0 0.5 3.4.3.3 Other data strategies Random sampling and random assignment are not the only kinds of data strategies. Others may include merging in fixed administrative data from other sources, collapsing data across months or days, and other operations. You can include these as steps in your design too, using declare_step. Here, you must define a handler, as we did for using a custom function in declare_population. Some handlers that may prove useful are the dplyr verbs such as mutate and summarize, and the fabricate function from our fabricatr package. To add a variable using fabricate: declare_step(handler = fabricate, add_variable = rnorm(N)) If you have district-month data you may want to analyze at the district level, collapsing across months:5 collapse_data &lt;- function(data, collapse_by) { data %&gt;% group_by({{ collapse_by }}) %&gt;% summarize_all(mean, na.rm = TRUE) } declare_step(handler = collapse_data, collapse_by = district) 3.4.4 Answer strategy Through our model and data strategy steps, we have simulated a dataset with two key inputs to the answer strategy: an assignment variable and an outcome. In other answer strategies, pretreatment characteristics from the model might also be relevant. The data look like this: ID u Y_Z_0 Y_Z_1 S_inclusion_prob Z Z_cond_prob Y 001 -0.4153519 -0.4153519 -0.1653519 0.5 1 0.5 -0.1653519 002 1.0032993 1.0032993 1.2532993 0.5 0 0.5 1.0032993 006 0.1320780 0.1320780 0.3820780 0.5 1 0.5 0.3820780 007 -0.1392812 -0.1392812 0.1107188 0.5 1 0.5 0.1107188 008 0.5031416 0.5031416 0.7531416 0.5 0 0.5 0.5031416 012 -0.0771282 -0.0771282 0.1728718 0.5 1 0.5 0.1728718 Our estimator is the difference-in-means estimator, which compares outcomes between the group that was assigned to treatment and that assigned to control. We can calculate the difference-in-means estimate with a call to summarize from dplyr: simple_design_data %&gt;% summarize(DiM = mean(Y[Z == 1]) - mean(Y[Z == 0])) DiM -0.1209252 The estimatr package makes this easy and calculates the design-based standard error and a p-value and confidence interval for you: difference_in_means(Y ~ Z, data = simple_design_data) term estimate std.error statistic p.value conf.low conf.high df outcome Z -0.1209252 0.3134633 -0.3857713 0.7014032 -0.7514985 0.5096482 47.09491 Y Now, in order to declare our estimator, we can send the name of a model to declare_estimator. R has many models that work with declare_estimator, including lm, glm, the ictreg package from the list package, etc. The design-based estimators from estimatr can all be used. declare_estimator(Y ~ Z, model = difference_in_means, estimand = &quot;PATE&quot;) In this declaration, we also define the estimand we are targeting with the difference-in-means estimator.6 Typically, you will have an estimand that you are targeting, and sometimes you may consider targeting more than one and assessing how good your estimator estimates them. For example, you may want to know how good a job your instrumental variables job is at targeting the complier average causal effect, but also how close it gets on average to the average treatment effect. Typically, we think of potential outcomes as fixed and not random, and move random variables to the population.↩ The {{ }} syntax is handy for writing functions in dplyr where you want to be able reuse the function with different variable names. Here, the collapse_data function will group_by the variable you send to the argument collapse_by, which in our declaration we set to district. The pipeline within the function then calculates the mean in each district.↩ Sometimes, you may be interested just in the properties of an estimator, such as calculating its power. In this case, you need not define an estimand.↩ "],
["building-a-design-from-design-steps.html", "3.5 Building a design from design steps", " 3.5 Building a design from design steps In the last section, we defined a set of individual research steps. We draw one version of them together here: population &lt;- declare_population(N = 100, u = rnorm(N)) potential_outcomes &lt;- declare_potential_outcomes(Y_Z_0 = u, Y_Z_1 = Y_Z_0 + 0.25) estimand &lt;- declare_estimand(PATE = mean(Y_Z_1 - Y_Z_0)) sampling &lt;- declare_sampling(n = 50) assignment &lt;- declare_assignment(prob = 0.5) reveal &lt;- declare_reveal(outcome_variables = Y, assignment_variables = Z) estimator &lt;- declare_estimator(Y ~ Z, model = difference_in_means, estimand = &quot;PATE&quot;) To construct a research design object that we can operate on — diagnose it, redesign it, draw data from it, etc. — we add them together with the + operator. The + creates a design object. simple_design &lt;- population + potential_outcomes + estimand + sampling + assignment + reveal + estimator In the book, we’ll use a more compact way of writing a design, where we define it all at once with the +: simple_design &lt;- declare_population(N = 100, u = rnorm(N)) + declare_potential_outcomes(Y_Z_0 = u, Y_Z_1 = Y_Z_0 + 0.25) + declare_estimand(PATE = mean(Y_Z_1 - Y_Z_0)) + declare_sampling(n = 50) + declare_assignment(prob = 0.5) + declare_reveal(outcome_variables = Y, assignment_variables = Z) + declare_estimator(Y ~ Z, model = difference_in_means, estimand = &quot;PATE&quot;) 3.5.1 Order matters When defining a design, the order steps are included in the design via the + operator matters. Think of the order of your design as the causal order in which steps take place. population + potential_outcomes + estimand + sampling + assignment + reveal + estimator The order encodes several important aspects of the design: - First, the fact that the estimand follows the potential outcomes and comes before sampling and assignment means it is a population estimand, the population average treatment effect. This is because it is calculated on the data created so far. - The estimator comes after the assignment and reveal outcomes steps. If it didn’t, our difference-in-means would not work, because it wouldn’t have access to the treatment variable and the realized outcomes. "],
["simulating-a-research-design.html", "3.6 Simulating a research design", " 3.6 Simulating a research design Diagnosing a research design — learning about its properties — requires first simulating running the design over and over. We need to simulate the data generating process, then calculate the estimands, then calculate the estimates that will result. 3.6.1 In dplyr We first demonstrate how to use the tidy functions created by the declare_* functions in a dplyr pipeline to simulate a design once. We can run the population function, which generates the data structure, and then add the potential outcomes, and calculate the estimand as follows: population() %&gt;% potential_outcomes %&gt;% estimand estimand_label estimand PATE 0.25 This is the same thing as running the functions one at a time on each other: estimand(potential_outcomes(population())). Similarly, if we want to draw simulated estimates from the design, we again simulate a population, add potential outcomes, but now sample units, assign treatments to sampled units, reveal the outcomes, and calculate estimates: population() %&gt;% potential_outcomes %&gt;% sampling %&gt;% assignment %&gt;% reveal %&gt;% estimator estimator_label term estimate std.error statistic p.value conf.low conf.high df outcome estimand_label estimator Z 0.2227215 0.3264459 0.6822618 0.4985425 -0.4346286 0.8800717 45.36395 Y PATE 3.6.2 In DeclareDesign With simple design defined as an object, we can easily learn about what kind of data it generates, the values of its estimand and estimates, and other features with simple funtions in DeclareDesign. They chain together functions in a similar way to the dplyr pipelines abov. To draw simulated data based on the design, we use draw_data: draw_data(simple_design) ID u Y_Z_0 Y_Z_1 S_inclusion_prob Z Z_cond_prob Y 001 -1.3523271 -1.3523271 -1.1023271 0.5 1 0.5 -1.1023271 002 -0.7237033 -0.7237033 -0.4737033 0.5 1 0.5 -0.4737033 006 0.3585086 0.3585086 0.6085086 0.5 0 0.5 0.3585086 008 -0.0191530 -0.0191530 0.2308470 0.5 0 0.5 -0.0191530 009 -0.0550281 -0.0550281 0.1949719 0.5 1 0.5 0.1949719 010 0.7643561 0.7643561 1.0143561 0.5 1 0.5 1.0143561 draw_data runs all of the “data steps” in a design, which are both from the model (population and potential outcomes) and from the data strategy (typically sampling and assignment). To simulate the estimands from a single run of the design, we use draw_estimands. This runs two operations at once: it draws the data, and calculates the estimands at the point defined by the design. For example, in our design the estimand comes just after the potential outcomes. In this design, draw_estimands will run the first two steps and then calculate the estimands from the estimand function we declared: draw_estimands(simple_design) estimand_label estimand PATE 0.25 Similarly, we can simulate the estimates from a single run with draw_estimates which draws data and at the appropriate moment calculates estimates. draw_estimates(simple_design) estimator_label term estimate std.error statistic p.value conf.low conf.high df outcome estimand_label estimator Z -0.3010792 0.188783 -1.594843 0.1173209 -0.680667 0.0785086 47.93078 Y PATE To diagnose a design, we want a data frame that includes the estimates and estimands from many runs of a design. That is, we want to run the design, draw estimates and estimands, and then do that over and over and stack the results. This is exactly what simulate_design does: simulate_design(simple_design, sims = 500) design_label sim_ID estimand_label estimand estimator_label term estimate std.error statistic p.value conf.low conf.high df outcome simple_design 1 PATE 0.25 estimator Z 0.3175358 0.2423225 1.310385 0.1963148 -0.1697132 0.8047847 47.89786 Y simple_design 2 PATE 0.25 estimator Z 0.4425311 0.2481185 1.783547 0.0808223 -0.0563487 0.9414110 47.98461 Y simple_design 3 PATE 0.25 estimator Z 0.4963841 0.2786012 1.781702 0.0812151 -0.0639871 1.0567554 47.32619 Y simple_design 4 PATE 0.25 estimator Z -0.3844193 0.2548717 -1.508285 0.1384238 -0.8976614 0.1288229 45.30661 Y simple_design 5 PATE 0.25 estimator Z 0.7340671 0.2561452 2.865824 0.0062576 0.2184385 1.2496957 45.88444 Y "],
["diagnosing-a-research-design.html", "3.7 Diagnosing a research design", " 3.7 Diagnosing a research design The simulations data frame we created allows us to diagnose the design (calculate summary statistics from the simulations) directly. We can, for example, use the following dplyr pipeline to calculate the bias, root mean-squared error, and power for each estimator-estimand pair. simulations_df %&gt;% group_by(estimand_label, estimator_label) %&gt;% summarize(bias = mean(estimate - estimand), rmse = sqrt(mean((estimate - estimand)^2)), power = mean(p.value &lt; .05)) estimand_label estimator_label bias rmse power PATE estimator 0.0712198 0.3844849 0.2 In DeclareDesign, we do this in two steps. First, declare your diagnosands. These are functions of the simulations data. We have precoded several standard diagnosands (see Section XX). study_diagnosands &lt;- declare_diagnosands( select = c(bias, rmse, power), mse = mean((estimate - estimand)^2)) Next, take your simulations data and the diagnosands, and diagnose. This runs a single operation, which is to calculate the diagnosands on your simulations data, just like in the dplyr version above. diagnose_design(simulations_df, diagnosands = study_diagnosands) design_label estimand_label estimator_label term mse se(mse) bias se(bias) rmse se(rmse) power se(power) n_sims simple_design PATE estimator Z 0.1478286 0.0724626 0.0712198 0.2048244 0.3844849 0.0937049 0.2 0.1962373 5 We can also do this in a single step. When you send diagnose_design a design object, it will first run the simulations for you, then calculate the diagnosands from the simulations data frame that results. diagnose_design(simple_design, diagnosands = study_diagnosands) "],
["comparing-designs.html", "3.8 Comparing designs", " 3.8 Comparing designs In the diagnosis phase, you will often want to compare the properties of two designs to see which you prefer on the basis of the diagnosand values. We have two ways to compare. First, we can compare the designs themselves — what kinds of estimates and estimands do they produce, what steps are in the design. And we can compare the diagnoses. compare_designs(simple_design, redesigned_simple_design) To compare the diagnoses, we run a diagnosis for each one and then calculate the difference between each diagnosand for the two designs and conduct a statistical test of the null effect of no difference. compare_diagnoses(simple_design, redesigned_simple_design) 3.8.1 Comparing many variants of a design Often, we want to compare a large set of similar designs, varying key design parameters such as sample size, effect size, or the probability of treatment assignment. The easiest way to do this is to write a function that makes designs based on a set of these design inputs. We call these designers. Here’s a simple designer based on our running example: simple_designer &lt;- function(sample_size, effect_size) { declare_population(N = sample_size, u = rnorm(N)) + declare_potential_outcomes(Y_Z_0 = u, Y_Z_1 = Y_Z_0 + effect_size) + declare_estimand(PATE = mean(Y_Z_1 - Y_Z_0)) + declare_sampling(n = 50) + declare_assignment(prob = 0.5) + declare_reveal(outcome_variables = Y, assignment_variables = Z) + declare_estimator(Y ~ Z, model = difference_in_means, estimand = &quot;PATE&quot;) } To create a single design, based on our original parameters of a 100-unit sample size and a treatment effect of 0.25, we can run: simple_design &lt;- simple_designer(sample_size = 100, effect_size = 0.25) Now to simulate multiple designs, we can use the DeclareDesign function expand_design. Here we examine our simple design under several possible sample sizes, which we might want to do to conduct a minimum power analysis. We hold the effect size constant. simple_designs &lt;- expand_design(simple_designer, sample_size = c(100, 500, 1000), effect_size = 0.25) Our simulation and diagnosis tools can take a set of expanded designs (an R list) and will simulate all of them at once, creating a column called design_label to keep them apart. For example: diagnose_design(simple_designs) 3.8.2 Library of designs In our DesignLibrary package, we have created a set of common designs as designers, so you can get started quickly and also easily set up a range of design variants for comparison. library(DesignLibrary) b_c_design &lt;- block_cluster_two_arm_designer(N = 1000, N_blocks = 10) diagnose_design(b_c_design) "],
["research-questions.html", "Chapter 4 Research questions", " Chapter 4 Research questions "],
["specifying-the-model.html", "Chapter 5 Specifying the model", " Chapter 5 Specifying the model In this chapter, we will talk about how to go about the tricky task of specifying a \\(M\\)odel and why it is so important to do so. We are not talking about “statistical models” used to estimate unknown parameters—those are part of your answer strategy. We are talking about specifying simulation models: a set of assumptions about how your data could be generated, encoded in math or computer language, which we can use to generate imaginary datasets. The distinction is a subtle but important one. We should only trust the inferences we draw from a statistical model if we think they would be good inferences to draw based on a plausible \\(M\\)odel of how the data was generated. \\(M\\)odels often lurk where you might not expect them. When researchers do experiments, they often compare the average observed outcome in the treatment group to the average observed outcome in the control group in order to get an estimate of the average treatment effect.7 This comparison requires no statistical modelling of the distributions of the observed variables: it follows from the fact that the average difference in two potential outcomes is equal to the difference in the averages of those two potential outcomes. So it seems as though such strategies are completely agnostic as to how the data was generated. Implicit in the very definition of the average treatment effect here, however, is a \\(M\\)odel: specifically, one in which any particular draw of the random assignment is able to reveal no more than two potential outcomes for any given individual—this is sometimes referred to as a “no spillovers” assumption. But many social processes violate this assumption. If I do something differently every time you get treated and I do not, then I have at least three potential outcomes: one in which I am treated, one in which neither of us are treated, and one in which you are treated but I am not. The average observed difference-in-means across random assignments might diverge quite substantially from the average effect we are interested in (say, of putting just one person in treatment and the rest in control). So even the simplest, most agnostic research design is relying on the plausibility of an implicit \\(M\\)odel in order to generate insights that are correct on average. In practice, we never get to know whether our \\(M\\)odel is right. For example, we can never really know how many potential outcomes there are. So we also cannot know if we got the right answer. What we can do, however, is study our procedure for generating answers under \\(M\\)odels of the world that we find plausible. That way, we do get to know which answers we should and should not trust, given the assumptions we are willing to make about the world. …of putting one person in treatment and everyone else in control↩ "],
["declaring-exogenous-and-endogenous-variables-in-the-population.html", "5.1 Declaring exogenous and endogenous variables in the population", " 5.1 Declaring exogenous and endogenous variables in the population Remember from Chapter X that declaring a \\(M\\)odel means specifying exogenous and endogenous variables, how they are related to one another, and the probability distributions that determine which values the variables take. That might sound hard but it does not need to be. The following line of code contains a fully specified model: population &lt;- declare_population(N = 8, e = runif(N), X = rnorm(N, e, 1)) An exogenous variable is one whose values do not depend on the values of any other variable in the \\(M\\)odel. Here, e is an exogenous variable: it is simply a random draw from the uniform distribution between 0 and 1, inclusive. So long as N stays fixed, no other variables influence the values that e takes on. An endogenous variable is one whose values can depend on another variable. Here, because X is defined as a function of the value that e takes, we say X is endogenous to its “parent,” e (we use the term “parent” to describe the variables that appear in the function defining an endogenous variable). The code says that the value that X takes for a given individual is equal to a random draw from a normal distribution whose mean is equal to their value of e and whose standard deviation is equal to 1. The population function we just declared generates random datasets with eight observations of e and X. Try running this code a few times to see: population() ## ID e X ## 1 1 0.9148060 1.3190744 ## 2 2 0.9370754 0.8309509 ## 3 3 0.2861395 1.7976615 ## 4 4 0.8304476 0.7357886 ## 5 5 0.6417455 2.6601692 ## 6 6 0.5190959 0.4563819 ## 7 7 0.7365883 2.0414580 ## 8 8 0.1346666 2.4213120 As we will see below, the population function is a useful place to declare all of the exogenous variables and many of the endogenous variables in our study, along with some pretty complicated relationships between them. If we want to learn about our inferences, however, our model also has to define potential outcomes. "],
["declaring-potential-outcomes.html", "5.2 Declaring potential outcomes", " 5.2 Declaring potential outcomes Remember from section X that potential outcomes are the building blocks of your inquiry—they describe counterfactual states of the world that could exist, depending on some parent variable. Say the parent variable is whether you are contacted by an election campaign canvasser, who tries to convince you to vote for Jane Doe, a candidate running in your district. Then you might have at least two potential outcomes that depend on the value of this variable: whether you vote for Jane Doe when a canvasser from her campaign contacts you, on the one hand, and whether you vote for Jane Doe when that canvasser does not contact you, on the other. The difference in those two states of the world describes the treatment effect of the election campaign canvasser on whether you vote for Jane Doe. Say we did an experiment in which that canvasser visits five out of ten people who answer doors, selected at random. Then we could define the potential outcomes of the people they visit as endogenous variables: the “untreated” potential outcome of the experiment would encode whether each door-answerer would vote for Jane Doe if they were not contacted by the canvasser, and the “treated” potential ouctcome would encode whether they vote for Jane Doe if they were contacted by the canvasser. In addiiton to the untreated and treated potential outcomes of this experiment, we can add a third, distinct, variable: the vote choice that we would actually observe in an experiment where we actually assigned half of the people to canvassing. To reiterate, if a researcher wants to declare a study with two treatment conditions and no spillovers, her model will have to include at least three variables: The untreated potential outcome The treated potential outcome The observed outcome That is why DeclareDesign has a whole step devoted to declaring potential outcomes. The declare_potential_outcomes() step is crucial because it splits up endogenous variables into the counterfactual sets of values they could take, given the variables they depend on. Consider this declaration: potential_outcomes &lt;- declare_potential_outcomes(Y_Z_0 = .5 &lt; e, Y_Z_1 = .5 &lt; e + .05) Here, we have added two variables to the dataset, Y_Z_0 and Y_Z_1. They are both endogenous, in the sense that they depend on the value that e takes and on the value that Z takes.8 So Y_Z_1 is a list of the hypothetical values Y could take, if you were to set a specific variable it depends on, Z, to take the value of 1. Suppose, for example, that e represents a person’s utility from voting for Jane Doe. Then, the code says that each person will vote for Jane Doe if e is greater than .5 when they’re untreated, and if they are treated, they vote for Jane Doe when e + .05 is greater than .5. So, the \\(M\\)odel stipulates that canvassing makes people roughly five percentage points more likely to vote for Jane Doe. A variable’s potential outcomes can either be expressed by defining each potential outcome explicitly, as we do above, or through what we call a “potential outcomes function:” potential_outcomes &lt;- declare_potential_outcomes(Y ~ .5 &lt; e + .05 * Z) By default, declare_potential_outcomes() assumes that the functional equation for Y will include a binary Z that it can split on to create Y_Z_0 and Y_Z_1. But you can also tell the function to split on any other variables that take on any kind of value. For example, potential_outcomes &lt;- declare_potential_outcomes( income ~ employed + education + u, assignment_variables = list(employed = c(&quot;No&quot;,&quot;Yes&quot;), education = c(10,12))) will create four new variables: income_employed_No_education_10, income_employed_No_education_12, income_employed_Yes_education_10, and income_employed_Yes_education_12. In this setup, income is the observed variable and the other four variables are the potential outcomes that would result from assigning individuals to the corresponding values of employed and education. The resultant function, potential_outcomes, knows not to create potential outcomes corresponding to values of u because u does not appear in the list of assignment_variables. 5.2.1 Potential outcomes can include variables that are not yet defined Careful readers may have picked up on something a bit confusing in the preceding paragraphs: we have defined potential outcomes in terms of a variable that has not yet been realized in our design. simple_design &lt;- population + potential_outcomes + estimand + sampling + assignment + reveal_outcomes + estimator The potential outcomes Y_Z_1 and Y_Z_0 are already defined in terms of Z in the second step of our design, well before the variable Z gets created in the fifth step, assignment. How is this possible? Oddly, perhaps, the values of potential outcomes do not depend on the actual values that the parent variables happen to take9—that is what makes them potential outcomes and not plain old outcomes. Imagine, for example, that your design involves assigning everyone to the control, so that \\(Z_i = 0~~\\forall~~i\\) in practice. In that case, we still define the treated potential outcome, \\(Y_i(Z_i = 1)\\), exactly as before. We do not need to know what values Z will actually take in order to define the values that Y could potentially take. What this requires at the model specification stage is some forwards-looking: you are going to need to model the imaginary states of the world that could happen before they happen. So, for example, if you have a different potential outcome depending on whether you are treated and whether you are sampled, then you need to define potential outcomes in terms of treatment assignment and sampling before either of these steps have occurred. More on this below. 5.2.2 When you do and do not need to define potential outcomes So when should you split endogenous variables into all of the counterfactual values they can take on (potential outcomes), and when should you leave them whole? In other words, which variables belong in your population and which belong in your potential_outcomes? Why do we split on variables like Z and not on variables like u or e? The short answer is that it all depends on your \\(I\\)nquiry. Let us take a simple example using the population declaration above. Suppose that you were interested in the average effect of \\(Z\\) on \\(Y\\), for any given value that \\(X\\) can take: \\(E[Y_i(1) - Y_i(0)]\\). Then your inquiry depends only on Y_Z_1 and Y_Z_0. Those are the only potential outcomes you need. What if you want to know the effect of \\(Z\\) on \\(Y\\) among groups for whom \\(X\\) happened to equal 1 or happened to equal 0: \\(E[Y_i(1) - Y_i(0)\\mid X_i = x]\\). Here, you are not interested in the causal effect of X, just in whether, descriptively, the effect of Z on Y just happens to different among people for whom X == 1. There is no need to split on X in this case: you just need to look at the difference in Y_Z_1 and Y_Z_0 among the people for whom X is equal to 1 or to 0, which can be achieved through subsetting. Now, let us imagine that you were interested in the causal effects of both X and Z on Y. For example, you might want to know whether X causes the effects of Z on Y to be bigger: \\[E[(Y_i(Z_i = 1,X_i = 1) - Y_i(Z_i = 0,X_i = 1)) - \\] \\[~~~~~(Y_i(Z_i = 1,X_i = 0) - Y_i(Z_i = 0,X_i = 0))].\\] That is a claim about the counterfactual states of Y as a function of both variables, and would require something such as: potential_outcomes &lt;- declare_potential_outcomes( Y_X_0_Z_0 = .5 &lt; e, Y_X_0_Z_1 = .5 &lt; e + .05, Y_X_1_Z_0 = .5 &lt; e, Y_X_1_Z_1 = .5 &lt; e + .05 + .05) Where Y_X_0_Z_1, for example, is a variable that lists every individual’s potential Y outcome if X were set to 0 and Z were set to 1. In this example, we have stipulated that X increases the effect of Z by .05. To see this, note that we can rewrite the potential outcomes declaration above using a potential outcomes function: declare_potential_outcomes(Y ~ .5 &lt; e + Z * .05 + Z * X * .05, assignment_variables = list(Z = 0:1, X = 0:1)) What if the value of \\(X\\) were itself a function of \\(Z\\), and your inquiry focused on the effect of \\(X\\) on \\(Y\\)—\\(E[Y_i(X_i = 1) - Y_i(X_i = 0)]\\)? In that case, you might model two sets of potential outcomes: the potential outcomes of \\(X\\) as a function of \\(Z\\), and the potential outcomes of \\(Y\\) as a function of \\(X\\): potential_outcomes &lt;- declare_potential_outcomes( X_Z_0 = .5 &lt; e * 0.75, X_Z_1 = .5 &lt; e * 1.25, Y_X_0 = .5 &lt; e, Y_X_1 = .5 &lt; e + .05) Here, we are assuming Z is exogenous in the sense that it is randomly assigned. However, X, the causal variable of interest, is endogenous to e and to Z. In fact, if we are interested in the effect of X on Y, e is no longer background noise here as it was in the examples above: it has become a confounder of the causal effect in which we are interested . To see this, note that higher levels of e make both X and Y more likely to be TRUE. This is the sort of setup in which analysts would typically use an “instrumental variables” approach (callout to IV).10 In practice, there are always many many more potential outcomes lurking in your study than you need to model. Notice, for example, that we did not model the potential outcomes of Y as a function of specific levels of e above – unless we care about the causal effect of e on some outcome, there is little reason to model the counterfactuals it gives rise to. In the following two sections, we walk through some more concrete advice on which kinds of potential outcomes you need to consider modelling. Specifically, we think you should focus on potential outcomes generated through two processes: manipulation and interference. 5.2.3 Manipulation creates potential outcomes Manipulation is some real or imagined intervention in the world that sets the values of a parent of one of your outcomes. Perhaps the most obvious manipulation is assignment to treatment—a coin flip, for example, is a manipulation that sets \\(Z\\) to 1 for roughly half of the people and to 0 for the others. In quasi-experimental designs, we imagine a quasi-assignment: a non-random policy intervention might set some constituencies to have a change in their electoral rules and not others, for example. In that case, we imagine every constituency’s potential outcome had the policy intervention taken place there, and vice versa. But there are many other kinds of manipulations: measurement and sampling are two obvious examples. When you randomly sample someone and conduct a survey with them, you set their sampling status to “Sampled” and their measurement status to “Measured.” In general, you should consider modeling any manipulation that might affect the value of your \\(I\\)nquiry. A good rule of thumb is that there will be at least as many potential outcomes as the Cartesian product of the range of the manipulated variables. Let us suppose, for example, that you have a treatment variable with three values, \\(Z \\in \\{1,2,3\\}\\), and you think that there might be Hawthorne effects – e.g., an effect of having your outcomes measured, \\(M \\in \\{0,1\\}\\). That implies you should have six potential outcomes, \\(Y_i(Z_i,M_i)\\): \\(Y_i(1,0)\\), \\(Y_i(2,0)\\), \\(Y_i(3,0)\\), \\(Y_i(1,1)\\),\\(Y_i(2,1)\\), and \\(Y_i(3,1)\\). The first three represent states of the world revealed by assigning someone to the different arms of the treatment when they are not measured, and the latter three those same treatment outcomes when measured. The following potential outcomes declaration suggests a Hawthorne effect: hawthorne_POs &lt;- declare_potential_outcomes( Y_Z_1_M_0 = .5 &lt; e, Y_Z_2_M_0 = .5 &lt; e + .05, Y_Z_3_M_0 = .5 &lt; e + .05, Y_Z_1_M_1 = .5 &lt; e + .05, Y_Z_2_M_1 = .5 &lt; e + .05 + .05, Y_Z_3_M_1 = .5 &lt; e + .05 + .05) Note, however, that our design now requires some modifications: simple_design has an inquiry defined in terms of the simpler potential outcomes, Y_Z_1 and Y_Z_0, which no longer exist. We need to clarify that we are interested in the effect of treatment without any measurement effects (here, we will say we are interested in the treatment 2 versus 1 comparison). Second, simple_design had no variable M to split on: we need a step in which we manipulate the measurement variable to be 1 for everyone in the sample. Finally, simple_design revealed Y purely as a function of Z, but we need to declare that the observed Y will correspond to the values of both Z and M: assignment &lt;- declare_assignment(conditions = c(1,2,3)) estimand_no_m &lt;- declare_estimand(ate_2_no_m = mean(Y_Z_2_M_0 - Y_Z_1_M_0)) measurement &lt;- declare_step(M = 1, handler = fabricate) reveal_outcomes_measurement &lt;- declare_reveal(Y, c(Z, M)) hawthorne_design &lt;- population + hawthorne_POs + estimand_no_m + sampling + assignment + measurement + reveal_outcomes_measurement + estimator From here, it is easy to modify our design with measurement effects to stipulate a model in which there is an interaction between treatment and measurement—this is often referred to as an “experimenter demand” effect, and can be more problematic for inference than a simple Hawthorne effect (you can do some simple algebra with the estimand declaration to see why): experimenter_demand_POs &lt;- declare_potential_outcomes( Y_Z_1_M_0 = .5 &lt; e, Y_Z_2_M_0 = .5 &lt; e + .05, Y_Z_3_M_0 = .5 &lt; e + .05, Y_Z_1_M_1 = .5 &lt; e, Y_Z_2_M_1 = .5 &lt; e + .05 + .05, Y_Z_3_M_1 = .5 &lt; e + .05 + .10) demand_design &lt;- replace_step(design = hawthorne_design, step = &quot;hawthorne_POs&quot;, new_step = experimenter_demand_POs) The very same logic can be applied to defining interactions between different treatment arms, effects from sampling, and other interactive effects. 5.2.4 Interference creates potential outcomes We stated in the previous section that there are usually at least as many potential outcomes as the Cartesian product of the ranges of the manipulated parents. But that statement assumes that the value of each individual’s potential outcome depends only on the value of their own parent variables. When one individual’s potential outcomes depend on the value of a manipulated variable of any other unit in the study, we refer to this as “interference.” Interference is a generic concept that includes social processes such as spillovers, social comparisons, contagion, communication, displacement, deterrence, and persistence [CITE GG p256-6]. Depending on your model, interference can generate a much, much larger space of potential outcomes. The formal notation for interference is that \\(Y_i(Z_i) \\neq Y_i(\\mathbf{Z})\\). Here, \\(\\mathbf{Z}\\) denotes the entire vector of random assignments: the math says that an individual’s potential outcome expressed in terms of their own assignment is not the same thing as their outcome expressed in terms of everyone’s assignment. Accordingly, the most general potential outcomes model in the presence of interference is one in which every conceivable realization of \\(\\mathbf{Z}\\) is mapped to exactly one potential outcome. Consider an employee-of-the-month experiment, in which one of three individuals is randomly assigned to be employee of the month (reference to GG). Suppose that employees 1 and 2 do not like each other. We will define potential outcomes in the following manner: \\(Y_i(j)\\), where \\(j\\) denotes the index of the treated individual. So, for example, \\(Y_2(3)\\) is the potential outcome of the second individual when individual 3 is assigned to treatment. interference_design &lt;- declare_population(N = 3, e = runif(N)) + declare_potential_outcomes( Y_J_1 = c(.5 &lt; e[1] + 1, .5 &lt; e[2] - 1, .5 &lt; e[3]), Y_J_2 = c(.5 &lt; e[1] - 1, .5 &lt; e[2] + 1, .5 &lt; e[3]), Y_J_3 = c(.5 &lt; e[1], .5 &lt; e[2], .5 &lt; e[3] + 1)) + declare_assignment(conditions = c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;), assignment_variable = &quot;J&quot;) + declare_step(Z = as.numeric(ID == J), handler = fabricate) + declare_reveal(Y, J) + declare_estimator(Y ~ Z, model = lm_robust) Notice we did not declare an estimand here. That is because the inquiry in a design with interference requires particular attention (callout to inquiry section). As you can see, the space of potential outcomes can expand very quickly when we allow for every possible way in which the treatment can be assigned to affect outcomes differently. Under complete random assignment of \\(m\\) of \\(N\\) people to treatment or control, there are \\(N\\) choose \\(m\\) ways of assigning treatment, for example. For a simple design in which ten people are assigned to treatment and control in equal proportions, there are 252 potential outcomes to consider. The problem of specifying the potential outcomes in your \\(M\\)odel can quickly become intractable. Often, we do not actually expect outcomes to differ quite so much: if there are 100 employees in the company and Sally does not know Jim or Tracy, she might be indifferent between the two worlds in which either Jim or Tracy wins employee-of-the-month. Generalizing this principle, one might be able to cut down on the number of potential outcomes by considering spillovers limited to social networks within the company. Where possible, a good way to handle spillovers is to specify a \\(M\\)odel in which they function like any other treatment. Such \\(M\\)odels rely on qualitative knowledge, which can be wrong. Let us say, for example, that you were worried about spillovers in an experiment, but: 1) you know that people’s interactions are restricted by some ordering, such as a queue; 2) you strongly suspected that a person being treated only affects the outcomes of the next person in the queue, but not the person after. For example, if the treatment involved providing some randomly selected people in a queue with extra information and the outcome of interest was customer satisfaction, those who fall in the queue behind treated individuals might get frustrated at observing how long the person in front of them is taking. In this case, we can think of two treatments: \\(Z\\), being directly treated, and \\(S\\), having the person before you treated: spillover_POs &lt;- declare_potential_outcomes( Y_Z_0_S_0 = .5 &lt; e, Y_Z_1_S_0 = .5 &lt; e + .05, Y_Z_0_S_1 = .5 &lt; e - .05 / 2, Y_Z_1_S_1 = .5 &lt; e + .05 / 2) neighbors &lt;- declare_step(next_neighbor = c(N,(1:(N-1))), S = Z[next_neighbor], handler = fabricate) reveal_spillovers &lt;- declare_reveal(Y, c(Z, S)) spillover_design &lt;- population + spillover_POs + sampling + assignment + neighbors + reveal_spillovers + estimator Now, instead of \\(N\\) choose \\(m\\) potential outcomes, there are four—for any sample size. We have contained the problem of proliferating potential outcomes. Of course, showing that one’s strategy is robust to the spillovers specified in this \\(M\\)odel might not be convincing to a skeptic who contends spillovers might also affect the second or third person behind the treated individual. Moreso than ever, the validity of inferences depend on the robustness of the \\(A\\)nswer strategy to plausible \\(M\\)odels. 5.2.5 What to do with potential outcomes whose parents are continuous So far we have focused on potential outcomes whose parents take on discrete values. But another way in which potential outcomes can proliferate is if there are infinitely many places at which to consider splitting the outcome on the parent variable, as is the case with continuous parents. [INCLUDE EXAMPLE FROM PAPER] 5.2.6 Principal strata can be defined in terms of potential outcomes One important set of \\(I\\)nquiries comprise estimands that are specific to certain causal “types” in the population. For example, in designs in which not everyone assigned to treatment actually takes treatment, researchers are often interested in the treatment effect among those actually treated (often referred to as “compliers”). Similarly, in designs where some units do not report outcomes and where reporting is possibly a function of treatment, researchers are often interested in the effect among those who would report in either treatment or control. These causal types—referred to as “principal strata” in the literature [CITE imbens rubin]—can be usefully modeled in terms of potential outcomes. Consider the case of one-sided non-compliance: compliance_POs &lt;- declare_potential_outcomes( D_Z_0 = 0, D_Z_1 = ifelse(order(e) &gt; 4, 1, 0), Y_D_0 = .5 &lt; e, Y_D_1 = .5 &lt; e + .05) ate_estimand &lt;- declare_estimand(ate = mean(Y_D_1 - Y_D_0)) cace_estimand &lt;- declare_estimand(cace = mean(Y_D_1 - Y_D_0), subset = D_Z_0 == 0 &amp; D_Z_1 == 1) Here, treatment status, \\(D\\), is a potential outcome of treatment assignment, \\(Z\\). The CACE estimand is easily defined in terms of the causal type: it is the average effect among people for whom \\(D_i(Z_i = 0) =0, D_i(Z_i = 1) = 1\\). Similarly, we can think of attrition as a potential outcome. Here, people with the lowest four values of e do not report outcomes if assigned to control, but everyone reports when they are assigned to treatment. Whenever someone does not report we only observe an NA. attrition_POs &lt;- declare_potential_outcomes( R_Z_0 = ifelse(order(e) &lt;= 4, 1, 0), R_Z_1 = 1, Y_R_0_Z_0 = NA, Y_R_0_Z_1 = NA, Y_R_1_Z_0 = .5 &lt; e, Y_R_1_Z_1 = .5 &lt; e + .05) 5.2.7 Develop a null model You might be wondering whether \\(M\\)odels are simply a way of coding hypotheses. The two are similar but not quite the same: many \\(M\\)odels can correspond to the same hypothesis. One particularly important hypothesis is the so-called null hypothesis that the average effect of \\(Z\\) on \\(Y\\) is equal to zero. Consider the following three models: population &lt;- declare_population(N = 8, e = rnorm(N, 0, 1)) model_1 &lt;- population + declare_potential_outcomes(Y ~ e) model_2 &lt;- population + declare_potential_outcomes(Y ~ e + e * 2 * Z) model_3 &lt;- population + declare_potential_outcomes(Y ~ ifelse(e &gt; .5, Z * .2, -Z * .2)) Each of these models is consistent with the null hypothesis. In the first, treatment and control outcomes are exactly the same: \\(Z\\) does not even appear in the functional equation for \\(Y\\), there is no effect for any unit in the sample. This is sometimes referred to as a “sharp null hypothesis,” and is a specific case of the more general null. In model_2, \\(Z\\) increases the variance of \\(Y\\), but because the mean of \\(e\\) is 0, there is no average difference in the means of the treated and control outcomes: they are both zero. In model_3, there are large positive treatment effects for those with \\(e_i &gt; .5\\) and large negative treatment effects for those with \\(e_i \\leq .5\\). On average, the effects offset each other leading to an average effect of \\(Z\\) on \\(Y\\) that is equal to zero. Since there are infinitely many ways of parameterizing this average effect of zero (replace .2 with any number in model_3), there are infinitely many models that correspond to the single null hypothesis that the average effect of Z on Y is equal to zero. Despite the fact that there are many such null models to consider, and the fact that most researchers do not design a project expecting that null hypotheses are true, we see great value in declaring a so-called “null model.” By “null model,” we have in mind something like the potential outcomes in model_1: there is no relationship whatsoever between the outcome of interest and the treatment(s) of interest. You can you learn at least three important things from a “null model” design, or “null design.” First, the power of your null design is an important quantity: it is none other than the rate of false positives for your design, otherwise known as the type 1 error rate. It is important to know if the probability with which you (erroneously) reject the null of a zero average effect is equal to your \\(\\alpha\\): the rate at which you stipulate that you are comfortable erroneously rejecting the null (usually 5%). You might be quite happy to see that your non-null design exhibits great power with small effects, for example. But if you check your null design and see that your power is above 10%, then you know you have a problem: you are rejecting the null of no effect at twice the rate you should be for a stated error rate of 5%. Second, the ability to define the false positive rate for one estimator gives you the ability to define the false positive rate over all of the estimators in your design. This is often referred to as the family-wise error rate: how often at least one of the tests you run erroneously rejects the null of no effect. If your tests are completely unrelated to one another, this rate will just be \\(\\alpha^k\\), where \\(k\\) is the number of tests. But often rejecting one test implies you are more likely to reject another: if an erroneous rejection results from chance imbalance on a variable that is correlated with another variable tested against the same treatment, then you are likely to reject that test too. At the extreme, if you run \\(k\\) equivalent tests, the familywise error rate will be 5%: rejecting one means you reject the rest, failing to reject one means failing to reject the rest. So, as we show in section X, if you use your actual realized data to generate a null design, you can figure out what your actual familywise error rate is under the global null of no effect for any unit or outcome. From there, you can figure out what testwise \\(\\alpha\\) you would need to apply in order to reject any test in the family 5% of the time. Often, this will be a lot less punitive than out-of-the-box corrections for multiple comparisons. Third, and maybe most importantly for practical purposes, a null design does not require any specification about effect sizes. A perennial issue in power analysis is that calculating power requires specification of some arbitrary effect size. But often the very reason we do a study is to determine what the size of an effect is. More meaningful, we think, is using diagnosis to determine the smallest effect you could detect with 80% power. And for that, you only need a good estimate of the standard error, which does not depend on the effect size—it can be derived from a null design. When diagnosing a null design in order to calculate the MDE, it may be worth considering potential outcomes of the form declared in model_2: when trying to determine the standard error, it is important to consider whether the treatment may change the variance in the outcome, even if it does not change the mean. 5.2.8 Consider heterogeneity treatment effects may be stochastic—this can matter for variance estimation treatment effects may vary systematically—many otherwise unbiased designs become biased when this happens, so consider it by default In DeclareDesign, potential outcomes are labelled starting with the outcome (here, Y) followed by a specific parent variable whose effect we are interested in (here, Z), and the value that parent is set to (here 1 and 0), all separated by underscores.↩ Include reference to Pearl and truncation here? E.g. \\(Pr(Y~ \\mid ~do(X)) ~~|| ~~Pr(X)\\)↩ One shortcoming of this \\(M\\)odel is that it has “baked in” the assumption of an exclusion restriction: Y is only affected by Z through Z’s effect on X—Z does not appear in the expression for Y. Returning to the fish example: showing that an instrumental variables answer strategy performs well under this \\(M\\)odel would not be convincing to someone who worried about a particular, unmodeled, violation of the exclusion restriction.↩ "],
["declaring-populations.html", "5.3 Declaring populations", " 5.3 Declaring populations 5.3.1 Use data, if you have it can use it to estimate population parameters for RNGs can build off / bootstrap existing dataset start with a null design to calculate MDE 5.3.2 Incorporate hierarchy into your model Some examples of nested models Time-series models Stochastic group sizes "],
["without-a-model-you-can-get-the-answer-pretty-wrong.html", "5.4 Without a model you can get the answer pretty wrong", " 5.4 Without a model you can get the answer pretty wrong Of course, some research designs require much more \\(M\\)odel than others. In an experiment, we typically worry about everything that happens post-assignment when we draw up a \\(M\\)odel: attrition, compliance, and so forth. But in observational studies, in addition to those issues, the \\(M\\)odel for pretreatment variables can matter a lot. Take the simplest possible design, in which we want to know the effect of a non-randomly assigned treatment, \\(Z\\), on \\(Y\\). Say you have a pretreatment covariate, \\(X\\), that is correlated with both \\(Z\\) and \\(Y\\). Should you control for \\(X\\)? Some authors might argue that, because the values of \\(X\\) are realized prior to the values of \\(Z\\) and time cannot flow backwards, \\(X\\) is causally antecedent to \\(Z\\) and so it follows you cannot do worse by including it. Rosenbaum (2002), for instance, argues that “there is little to no reason to avoid adjustment for a true covariate, a variable describing subjects before treatment.” However, as (???) have shown, it turns out that if \\(Z\\) and \\(Y\\) are not confounded but \\(X\\) and \\(Y\\) are, then controlling for \\(X\\) introduces additional spurious dependency between \\(Z\\) and \\(Y\\) that can create considerable bias. If the question is “should you control for \\(X\\)?” the answer is always “it depends on your \\(M\\)odel.” So, you really need to specify a \\(M\\)odel: doing so helps determine the conditions under which your answers are credible. Without knowing the conditions under which we can believe your answers, it is hard to know whether to believe your answer. References "],
["defining-the-inquiry.html", "Chapter 6 Defining the Inquiry ", " Chapter 6 Defining the Inquiry "],
["classes-of-estimands.html", "6.1 Classes of estimands", " 6.1 Classes of estimands A well defined research design usually requires a well defined question and the quality of a design can often be assessed in terms of how well the question can be answered. In all that follows we will make use of the concept of an estimand, which we take to be quantity that you seek to estimate, it is the correct answer to the question you are asking. It’s October in an election year. Your inquiry is: “how many voters will vote Democrat in November?” The true answer is 66,221,143. This true answer is your estimand, you seek to estimate this number now, even though the election has not happened yet. On the basis of a survey your best guess is 65, 112, 114. This is your estimate for this estimand. In this case the estimand is a number and one that will eventually be revealed, letting you assess how well your estimate measures up against your estimand. But in social science inequiry estimands can take many different forms. We describe eight families of estimand. These different families reflect different social scientific orientations and often different It turns out that many estimands can be thought of as summaries of potential outcomes. TO describe these we will imagine a simple model, in which \\(Y\\) is thought to depend on \\(X\\) and \\(M\\) and \\(M\\) in turn is thought to depend on \\(X\\). We represent this barebones model using a DAG in figure ??. ADD NUMBERS WITH POTENTIAL OUTCOMES USE ONLY PO NOTATION 6.1.1 Descriptive estimands Descriptive estimands can also require inference, not simply measurement. Simplest case level estimand: \\[X = 1\\] “Yes” An example of a descriptive estimand is: \\[E_{i\\in N}(Y)\\] \\[E_{i\\in N}(Y | X=1)\\] This descriptive estimand is to be distinguished from the counterfactual estimand: \\[\\Pr(Y=1 | X \\leftarrow 1)\\] where \\(\\leftarrow\\) is interpreted to mean that \\(X\\) is “set” to the indicated value. Moments; covariance 6.1.2 Simple causal estimands The simplest causal estimand is the outcome that a unit (or group) would have under a possibly counterfactual condition. The expected potential outcome: \\[\\Pr(Y=1 | X \\leftarrow 1)\\] The average treatment effect is a summary of such potential outcomes across two conditions. \\[\\Pr(Y=1 | X \\leftarrow 1) - \\Pr(Y=1 | X \\leftarrow 0)\\] Defined over a population N, the average treatment effect is written using potential outcomes notation as: \\[E_{i\\in N}(Y(X=1) - Y(X=0))\\] These simple estimands might condition on observational quantities, giving rise to the conditional average treatment effect: \\[\\Pr(Y=1 | X \\leftarrow 1, M = 1) - \\Pr(Y=1 | X \\leftarrow 0, M = 1)\\] or, perhaps, controlled conditional average treatment effects: \\[\\Pr(Y=1 | X \\leftarrow 1, M \\leftarrow 1) - \\Pr(Y=1 | X \\leftarrow 0, M \\leftarrow 1)\\] or, perhaps differences in effects: Causes of effects estimand: 6.1.3 Local estimands / EStiamnds over latent classes, principal strata Complier average is also a CATE RDD is also a CATE Estimands as summaries 6.1.4 Study dependent estimands Expected ATT vs realized ATT 6.1.5 Complex counterfactuals 6.1.6 Parametric estimands Dimensionality reduction Model parameters 6.1.7 Vector-valued inquiries (set of predictions for N units), The diagnostic statistic is ith respect to the vector e.g. the CEF QCA estimand. 6.1.8 Models as estimands "],
["selecting-estimands.html", "6.2 Selecting estimands", " 6.2 Selecting estimands 6.2.1 You are responsible for your estimand 6.2.2 Estimands to purpose. Choice of inquiry is not valueless 6.2.3 Estimand scope:What is the set of units which you want to learn the answer about? Know what ATE averages over Implication of estimand definition for analysis 6.2.4 Unknown estimands: Inquiries for discovery "],
["crafting-a-data-strategy.html", "Chapter 7 Crafting a data strategy", " Chapter 7 Crafting a data strategy The data strategy is what researchers do in the world in order to collect information about it. Depending on the design, it could include decisions about any or or all of the following: how to sample or select cases, how to assign treatments, or how to measure outcomes. These choices apply to all kinds of research. In experimental research, a large focus is given to the assignment of treatments. How many treatment conditions should there be? Should we use a simple coin flip to decide who recieves treatment, or should we use a more complicated strategy like blocking? Experimenters are of course also very concerned with sampling and measurement procedures, but it is the random assignment to treatments that make experiments distinctive among research designs. Quantitative descriptive research, on the other hand, often has an inquiry like the population average of some outcome variable. Since the goal here is to draw inferences about a population on the basis of a sample, we need to pay special attention to the procedure by which units are selected into the sample. We might use a random sampling procedure in order to generate a design-based justification for generalizing from samples to population. Nonrandom sampling procedures are also possible: convenience sampling, respondent-driven sampling, and snowball sampling are all data strategies that do not include an explictly random component. Once we have selected units into the sample, we need to measure them in some way. The tools we use to measure are a critical part of the data strategy. For many social scientific studies, a main way we collect information is through surveys. A huge methodological literature on survey administration has developed to help guide researchers who have to design questionnaires. Bad survey questions yield distorted or noisy responses. They can be distored if responses are systematically biased away from the true latent target the question is designed to measure, in which case the question has low validity. They can be noisy if (hypothetically) you would obtain different answers each time you asked the same person the same question, in which case the question has low reliability. Beyond surveys, we might use administrative data to collect outcomes. The concerns about validity and reliability do not disappear once we move out of the survey environment. The information that shows up in an administrative database is itself the result of many human decisions, each of which has the possibility of increasing or decreasing the distance between the measurement and the thing to be measured. Researchers have to choose good sampling, assignment, and measurement techniques that, when combined and applied to the world, will produce information that is ready for analysis. We will discuss answer strategies – the set of analysis choices about what to do with the data once it’s collected – in the next chapter. The data and answer strategies are of course intimately interconnected. How you analyze data depends deeply on how it was collected and how you collect data depends just as deeply on how you plan to analyze it. For the moment, we are thinking through the many choices we might make as part of the data strategy, but of course they will have to be considered in concert with the answer strategy in any applied research design setting. The data strategy is a set of procedures that result in a dataset. It is important to keep these two concepts straight. If you apply data strategy \\(D\\), it produces dataset \\(d\\). The data \\(d\\) is the result of the data strategy \\(D\\). We say \\(d\\) is “the” result of \\(D\\), since when we apply the data strategy to the world, we only do so once and we obtain the data that we obtain. But when we are crafting a data strategy, we have to think about the many datasets that the data strategy could have produced. Some of the datasets might be really excellent. For example, in good datasets, we achieve good covariate balance across the treatment and control groups. Or we might draw a sample whose distribution of observable characteristics looks really similar to the population. But some of the datasets might be worse: because of the vagaries of randomization, the particular realizations of the random assignment or random sampling might more more or less balanced. We do not have to settle for data strategies that can produce worse datasets! We want to choose data strategy \\(D\\) that is likely to result in a high-quality dataset \\(d\\). "],
["choosing-a-sampling-procedure.html", "7.1 Choosing a sampling procedure", " 7.1 Choosing a sampling procedure simple, complete, stratified, clustered, stratified and clustered weighted sampling (over/undersampling) quota sampling "],
["choosing-an-assignment-procedure.html", "7.2 Choosing an assignment procedure", " 7.2 Choosing an assignment procedure simple, complete, blocked, clustered, blocked and clustered point restricted randomization no assignment procedure at all multiple arms "],
["choosing-a-measurement-procedure.html", "7.3 Choosing a measurement procedure", " 7.3 Choosing a measurement procedure Should this be where we do the first bit of distinction between latent and observed more T (david McKenzie). How frequently to measure. Andy - arguing against intermediate measurement? multiple measurements of Y. make a scale "],
["section.html", "7.4 ", " 7.4 just downloading the data. Did you offload the data strategy possibly ambiguous where the data strategy ends and the analysis strategy ends. SOMEone did parts of the datastrategy "],
["choosing-an-answer-strategy.html", "Chapter 8 Choosing an answer strategy", " Chapter 8 Choosing an answer strategy "],
["what-is-included-in-an-answer-strategy.html", "8.1 What is included in an answer strategy", " 8.1 What is included in an answer strategy once you have the data, you need to have a procedure to develop an answer or a decision from it. it should be quantitative or qualitative. you will connect an estimator to an estimand, and the estimator designed to produces estimates of the estimand. distinguish estimate/estimator, using the notation from the paper (am Am etc.). a function to produce an estimate and measure(s) of uncertainty of the estimate. may be as simple as a mean or difference-in-means, as in our simple design: estimates_df &lt;- difference_in_means(Y ~ Z, data = simple_design_data) kable(tidy(estimates_df)) term estimate std.error statistic p.value conf.low conf.high df outcome Z 0.5 0.5 1 0.5 -5.853102 6.853102 1 Y in this case, there is a single statistic (the average difference between outcomes in treated and controlled) that represents the estimate. this is our guess of the estimand, the average treatment effect. these are basically all diagnostic statistics. need to highlight the estimate as the most important part of the answer strategy. in addition, we have several statistics that assess the uncertainty of the estimate, here the standard error and a frequentist confidence interval. the answer strategy is not just how you get to the answer, but how sure you are of it. we often also have statistics related to hypothesis testing, here a test statistics and p-value under the null hypothesis of a zero average treatment effect. our “answer” may either be the estimate of the average treatment effect, or in some cases the decision, is there a non-zero average treatment effect. your answer strategy is the full set of steps from first seeing the data until the estimate of the estimand you present in the paper, which is usually more than just the estimate, its uncertainty measure, and associated hypothesis test. procedures, if any, by which you explore the data and determine a final set of estimates are part of the answer strategy. for example, we sometimes find that the model we planned to run to analyze the data cannot be estimated. in these cases, there is an iterative estimation procedure in which a first model is run, changes to the specification are made, and a second or third model is presented as the result. that full set of steps – a decision tree, depending on what is estimable – is the answer strategy and we can evaluate whether it is a good one not only under the realized data but under other possible realizations where the decision tree would be the same but the decisions different. precommittment is part of the answer strategy procedures for addressing deviations from expected analyses are part of the answer strategy. whether a study has a PAP or not, we often have a way we expect to analyze the data if things go well. when they do not – because data are missing, there is noncompliance to an intervention, or the study is suspended for example – the answers will change. these procedures determine the answer the study provides (or in some cases does not), so are part of the answer strategy. standard operating procedures (lin and green) are documents that systematize these procedures in advange. procedures where you run two procedures and pick the best fit or preferred on some dimensions how you present the estimates — graphically, in tables, and in text — are all parts of the answer strategy. this is because the inferences readers make about the estimand from your paper do not just come from the numerical estimate. in some cases, the number may not even be presented exactly, and instead a graphic of the estimate and its confidence interval is what readers rely on. robustness checks are part of the answer strategy. often, a single estimator is presented as the main analysis but then a series of alternative specifications are displayed in an appendix (such as including or excluding covariates and their interactions, different subsets of the data, or alternative statistical models). the purpose is to provide readers with evidence about how dependent the main results are on the specification, data subset, and statistical model used. when this is the case, the decision a reader makes based on their inferences about the estimand from the estimate depend not only on the main estimate but also the robustness checks. as a result, we want to assess the properties of the two together. (or is it a diagnostic statistic?? CHANGE THIS TO TALK ABOUT THIS AS A SET OF STATISTICS THAT ARE FOR A SINGLE RUN. ROBUSTNESS OF THE ANSWER STRATEGY. ROBUSTNESS AS A DIAGNOSTIC STATISTIC.) distinguish this from changes to the model where we do robustnesss vis a vis a fixed answer and data strategy. two notions of “robustness”. one is fix I D A and change M, is this “design” robust to changes in M. the other is, within a given run, is the estimate “robust” to changing the estimation procedure, so this is a diagnostic statistic. note I must be defined across these changes in M. your answer strategy should take into account how many statistical tests you are conducting, not just focus on the estimate-estimand pair. when you present the results from many null hypothesis tests, the rate of falsely rejecting at least one of those tests even when all are true goes up, due to the multiple comparisons problem. if you plan to adjust for this problem, those adjustments are part of your answer strategy, because they will typically adjust the p-values you report and the decisions readers make with them. as this seection has highlighted, the answer strategy is intimately connected with the data strategy. people often think of their entire research design as the answer strategy. but they can’t be separated. "],
["what-are-the-properties-of-a-good-answer-strategy.html", "8.2 what are the properties of a good answer strategy", " 8.2 what are the properties of a good answer strategy typically, we want to find an estimation strategy that, given the model and data strategy, produces estimates that have as close as possible as often as possible to the estimand. there are several ways of thinking about how close they are and how often. bias, MSE. as we discuss in section XX (diagnosis), you should select the set of diagnosands to purpose, depending on why you are conducting the research and what decisions you expect readers to make in response to it. we often think about increasing the power of a design by changing our sample size or other aspects of the data strategy. but there is often significant room to grow power through the answer strategy alone, holding the data strategy constant. in an experiment, controlling for pretreatment covariates that are very predictive of the outcome often yields significant power gains, for example. best in the set (among set of simple linear models, what is the best model) "],
["how-to-select-an-answer-strategy.html", "8.3 how to select an answer strategy", " 8.3 how to select an answer strategy introduce classes of estimators: qual/quant, frequentist/bayesian, design based and model based (logit probit etc.) talk about issue of model-based vs design based, as separated from the model you assume in M. in model based you run a procedure that assumes a dgp, which may or may not be connected to the M. your data strategy should shape your answer strategy (analyse as you randomize) assignment strategies (blocks and/or clusters, heterogeneous assignment probabilities, etc.) sampling strategies (strata and/or clusters, heterogeneous sampling probabilities, etc.) this is true not just for experiments but for surveys (how did you sample), natural experiments (how did nature assign the treatment), and other designs you can select an answer strategy in advance, by simulating data. when estimators are selected with the data in hand, choices are often made in response to the realized data through examining model fit statistics that appear ideal in the context of this data, but are not ideal from the perspective of other data that could have been collected. we want answer strategies that perform well no matter how the data turn out. to compare answer strategies, you can imagine the estimators that are possible if things go well as well as if things go wrong, when there is missing data or there are outliers in variables. a good answer strategy (which might be a single estimator, or a procedure if-this-then-that) can handle both states of the world. "],
["diagnosis-1.html", "Chapter 9 Diagnosis", " Chapter 9 Diagnosis "],
["diagnosing-a-single-design.html", "9.1 Diagnosing a single design", " 9.1 Diagnosing a single design Definition and practical details of Monte Carlo and diagnosands (and discussion of formulae) [JC] Graphic of simulations (of multiple runs) "],
["how-do-you-select-diagnosands.html", "9.2 How do you select diagnosands?", " 9.2 How do you select diagnosands? Diagnose given the purposes of the study Single shot vs repeated designs (MSE vs bias) Moral questions (Type 1 vs Type 2 errors) Power for biased designs Standard diagnosands (paragraph on each of the diagnosands in our defaults) Ways of getting answers to a question wrong Diagnosing inferential statistics (SE bias vs. coverage, error rates for ps, Bayes?) How to select diagnosands (some sort of decision tree?) Multiple estimates / inquiries [JC] How to think about uncertainty about model parameters (multiple designs?) Diagnosands that are a function of “multiple designs” like MDE Conditional diagnosands different? Uncertainty of diagnosands (bootstrapping etc.) "],
["diagnosis-to-assess-the-robustness-of-designs-to-models-gb.html", "9.3 Diagnosis to assess the robustness of designs to models [GB]", " 9.3 Diagnosis to assess the robustness of designs to models [GB] Hold inquiry constant! (read Richard Crump “Moving the Goalposts”) Hold three constant, vary one of MIDA at a time M: ICC, null model, alternative DAGs, heterogeneity I: "],
["redesign-1.html", "Chapter 10 Redesign", " Chapter 10 Redesign "],
["design-library.html", "Chapter 11 Design Library", " Chapter 11 Design Library This section of the book enumerates a series of common social science research designs. Each entry will include description of the design in terms of MIDA and also a declaration of the design in code. We’ll often diagnose designs over the range of values of some design parameters in order to point out especially interesting or unusual features of the design. Our goal in this section is not to provide a comprehensive accounting of all empirical research designs. It’s also not to describe any of the particular designs in exhaustive detail, because we are quite sure that in order for these designs to be useful for any practical purpose, they will need to be modified. The entries in the design library are not recipes that, if you follow the instructions, out will come high-quality research. Instead, we hope that the entries provide inspiration for how to tailor a particular class of designs – the blocked-and-clustered randomized trial or the catch-and-release design – to your own research setting. The basic structure of the design library entry will be useful, but the specifics about plausible ranges of outcomes, sample size constraints, etc, will be different in each particular setting. We’ve split up designs by Inquiry and by Data strategy. Inquires can be descriptive or causal and Data strategies can be observational or experimental. This leads to four categories of research: Observational descriptive, Experimental descriptive, Observational Causal, and Experimental causal. A third dimension along which studies can vary is whether the Answer strategy is qualitative or quantitative. If we include this dimension in our typology, we’d end up with eight broad categories of research design. We don’t see the qualitative-quantitative difference in answer strategy to be as fundamental as the differences in inquiry and data strategy, so we’ll just include both qualitative and quantitative designs in each of our four categories. Besides, social scientists always appreciate a good two-by-two: In the broadest terms, descriptive inquiries can be described as \\(f(\\mathbf{Y(Z = Realized)})\\), where \\(f()\\) is some function and \\(\\mathbf{Y(Z = Realized)}\\) is a vector of realized outcomes. That is, descriptive designs seek to summarize (using \\(f()\\)) the world as it is (as represented by \\(\\mathbf{Y(Z = Realized)}\\)). Descriptive designs can be better or worse at answering that inquiry. The quality of descriptive research designs depends on the extent of measurement, sampling, and estimation error. Causal inquiries can be described as \\(f(\\mathbf{Y(Z)})\\), where \\(Z\\) is not a realized vector of treatments, but is instead is a vector that could take on counterfactual values. A standard causal inquiry is the Average Treatment Effect, in which \\(f()\\) is the function that takes the average of the difference between two potential outcome vectors, \\(Y(Z = 1)\\) and \\(Y(Z = 0)\\). But there are many causal inquiries beyond the ATE – the thing they all have in common is that they are functions not of realized outcomes, but of potential outcomes. The quality of causal research designs depends on everything that a descriptive design depends on, but also on the understanding and quality of the mechanism that assigns units to treatment conditions. All research designs suffer from some kind of missing data problem. Rubin pointed out missing data in surveys come from people you didn’t survey or people who refused to answer. In causal inference problems, the data that are missing are the potential outcomes that were not revealed by the world. In Descriptive studies, the data that are missing are the true values of the things to be measured. Measurement error is a missing data problem too! Observational research designs are typified by researchers having no impact on the units under study. They simply record the outcomes that happened in the world and would have happened even if the study did not occur. Experimental research designs are more active – they cause some potential outcomes to be revealed but not others. In this way, researchers have an impact on the units they study. For this reason, experimental studies tend to raise more ethical questions than do observational studies. Experimenters literally change what potential outcomes become realized outcomes. Sometimes the lines between types of research become blurry. The Hawthorne effect is the name given to the idea that measuring a thing changes it. If there are Hawthorne effects, than observational research designs also change which potential outcomes are revealed. That is, if there is a difference between Y(Z = measured) and Y(Z = unmeasured), then the act of observation changes that which is observed. Passive data collection methods are sometimes preferred on these grounds. "],
["observational-designs-for-descriptive-inference.html", "Chapter 12 Observational designs for descriptive inference", " Chapter 12 Observational designs for descriptive inference section introduction "],
["random-sampling.html", "12.1 Random sampling", " 12.1 Random sampling 12.1.1 Simple random sampling Often we are interested in features of a population, but data on the entire population is prohibitively expensive to collect. Instead, researchers obtain data on a small fraction of the population and use measurements taken on that sample to draw inferences about the population. Imagine we seek to estimate the average political ideology of residents of the small town of Portola, California, on a left-right scale that varies from 1 (most liberal) to 7 (most conservative). We draw a simple random sample in which all residents have an equal chance of inclusion in the study. It’s a straightforward design but formally declaring it will make it easy to assess its properties. 12.1.1.1 Design Declaration Model: Even for this most basic of designs, researchers bring to bear a background model of the world. As described in Chapter 1, the three elements of a model are the signature, probability distributions over variables, and functional equations among variables. The signature here is a specification of the variable of interest, \\(Y\\), with a well defined domain (seven possible values between 1 and 7). In the code declaration below, we assume a uniform distribution over these 7 values. This choice is a speculation about the population distribution of \\(Y\\); some features of the design diagnosis will depend on the choice of distribution. The functional equations seem absent here as there is only one variable in the model. We could consider an elaboration of the model that includes three variables: the true outcome, \\(Y\\); the decision to measure the outcome, \\(M\\); and the measured outcome, \\(Y^M\\). We ignore this complication for now under the assumption that \\(Y = Y^M\\), i.e., that \\(Y\\) is measured perfectly. Finally, the model also includes information about the size of the population. Portola, California, has a population of approximately 2100 people as of 2010, so \\(N = 2100\\). Inquiry: Our inquiry is the population mean of \\(Y\\): \\(\\frac{1}{N} \\sum_1^N Y_i = \\bar{Y}\\). Data strategy: In simple random sampling, we draw a random sample without replacement of size \\(n\\), where every member of the population has an equal probability of inclusion in the sample, \\(\\frac{n}{N}\\). When \\(N\\) is very large relative to \\(n\\), units are drawn approximately independently. In this design we measure \\(Y\\) for \\(n=100\\) units in the sample; the other \\(N-n\\) units are not measured. Answer strategy: We estimate the population mean with the sample mean estimator: \\(\\widehat{\\overline{Y}} = \\frac{1}{n} \\sum_1^n Y_i\\). Even though our inquiry implies our answer should be a single number, an answer strategy typically also provides statistics that help us assess the uncertainty around that single number. To construct a 95% confidence interval around our estimate, we calculate the standard error of the sample mean, then approximate the sampling distribution of the sample mean estimator using a formula that includes a finite population correction. In particular, we approximate the estimated sampling distribution by a \\(t\\) distribution with \\(n - 1\\) degrees of freedom. In the code for our answer strategy, we spell out each step in turn. # Model ------------------------------------------------------------------- N &lt;- 2100 fixed_population &lt;- declare_population(N = N, Y = sample(1:7, N, replace = TRUE))() population &lt;- declare_population(data = fixed_population) # Inquiry ----------------------------------------------------------------- estimand &lt;- declare_estimand(Ybar = mean(Y)) # Data Strategy ----------------------------------------------------------- n &lt;- 100 sampling &lt;- declare_sampling(n = n) # Answer Strategy --------------------------------------------------------- estimator &lt;- declare_estimator(Y ~ 1, model = lm_robust, estimand = estimand, label = &quot;Sample Mean Estimator&quot;) # Design ------------------------------------------------------------------ design &lt;- population + estimand + sampling + estimator diagnosands &lt;- declare_diagnosands(select = c(bias, coverage, mean_estimate, sd_estimate)) 12.1.1.2 Takeaways With the design declared we can run a diagnosis and plot results from Monte Carlo simulations of the design: diagnosis &lt;- diagnose_design( design, sims = sims, bootstrap_sims = b_sims, diagnosands = diagnosands) The diagnosis indicates that under simple random sampling, the sample mean estimator of the population mean is unbiased. The graph on the left shows the sampling distribution of the estimator: it’s centered directly on the true value of the inquiry. Confidence intervals also have a sampling distribution – they change depending on the idiosyncrasies of each sample we happen to draw. The figure on the right shows that the 95% of the time the confidence intervals cover the true value of the estimand, as they should. As sample size grows, the sampling distribution of the estimator gets tighter, but the coverage of the confidence intervals stays at 95% – just the properties we would want out of our answer strategy. Things work well here it seems. In the exercises we suggest some small modifications of the design that point to conditions under which things might break down. 12.1.2 Stratified and clustered random sampling Researchers often cannot randomly sample at the individual level because it may, among other reasons, be too costly or logistically impractical. Instead, they may choose to randomly sample households, political precincts, or any group of individuals in order to draw inferences about the population. This strategy may be cheaper and simpler but may also introduce risks of less precise estimates. Say we are interested in the average party ideology in the entire state of California. Using cluster sampling, we randomly sample counties within the state, and within each selected county, randomly sample individuals to survey. Assuming enough variation in the outcome of interest, the random assignment of equal-sized clusters yields unbiased but imprecise estimates. By sampling clusters, we select groups of individuals who may share common attributes. Unlike simple random sampling, we need to take account of this intra-cluster correlation in our estimation of the standard error.11 The higher the degree of within-cluster similarity, the more variance we observe in cluster-level averages and the more imprecise are our estimates.12 We address this by considering cluster-robust standard errors in our answer strategy below. 12.1.2.1 Design Declaration Model: We specify the variable of interest \\(Y\\) (political ideology, say) as a discrete variable ranging from 1 (most liberal) to 7 (most conservative). We do not define a functional model since we are interested in the population mean of \\(Y\\). The model also includes information about the number of sampled clusters and the number of individuals per cluster. Inquiry: Our estimand is the population mean of political identification \\(Y\\). Because we employed random sampling, we can expect the value of the sample mean (\\(\\widehat{\\overline{y}}\\)) to approximate the true population parameter (\\(\\widehat{\\overline{Y}}\\)). Data strategy: Sampling follows a two-stage strategy. We first draw a random sample 30 counties in California, and in each county select 20 individuals at random. This guarantees that each county has the same probability of being included in the sample and each resident within a county the same probability of being in the sample. In this design we estimate \\(Y\\) for n = 600 respondents. Answer strategy: We estimate the population mean with the sample mean estimator: \\(\\widehat{\\overline{Y}} = \\frac{1}{n} \\sum_1^n Y_i\\), and estimate standard errors under the assumption of independent and heteroskedastic errors as well as cluster-robust standard errors to take into account correlation of errors within clusters. Below we demonstrate the the imprecision of our estimated \\(\\widehat{\\overline{Y}}\\) when we cluster standard errors and when we do not in the presence of an intracluster correlation coefficient (ICC) of 0.402. N_blocks &lt;- 1 N_clusters_in_block &lt;- 1000 N_i_in_cluster &lt;- 50 n_clusters_in_block &lt;- 30 n_i_in_cluster &lt;- 20 icc &lt;- 0.402 # M: Model fixed_pop &lt;- declare_population( block = add_level(N = N_blocks), cluster = add_level(N = N_clusters_in_block), subject = add_level(N = N_i_in_cluster, latent = draw_normal_icc(mean = 0, N = N, clusters = cluster, ICC = icc), Y = draw_ordered(x = latent, breaks = qnorm(seq(0, 1, length.out = 8))) ) )() cluster_sampling_design &lt;- declare_population(data = fixed_pop) + # I: Inquiry declare_estimand(Ybar = mean(Y)) + # D: Data Strategy declare_sampling(strata = block, clusters = cluster, n = n_clusters_in_block, sampling_variable = &quot;Cluster_Sampling_Prob&quot;) + declare_sampling(strata = cluster, n = n_i_in_cluster, sampling_variable = &quot;Within_Cluster_Sampling_Prob&quot;) + # A: Answer Strategy declare_estimator(Y ~ 1, model = lm_robust, clusters = cluster, estimand = &quot;Ybar&quot;, label = &quot;Clustered Standard Errors&quot;) 12.1.2.2 Takeaways diagnosis &lt;- diagnose_design(cluster_sampling_design, sims = sims) Design Label Estimand Label Estimator Label Term N Sims Bias RMSE Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate Mean Estimand cluster_sampling_design Ybar Clustered Standard Errors (Intercept) 500 0.01 0.25 1.00 0.95 3.97 0.25 0.25 0.00 3.97 (0.01) (0.01) (0.00) (0.01) (0.01) (0.01) (0.00) (0.00) (0.00) To appreciate the role of clustering better we also plot simulated values of our estimand with standard errors not clustered and with clustered standard errors. To do this we first add an additional estimator to the design that does not take account of clusters. new_design &lt;- cluster_sampling_design + declare_estimator(Y ~ 1, model = lm_robust, estimand = &quot;Ybar&quot;, label = &quot;Naive Standard Errors&quot;) diagnosis &lt;- diagnose_design(new_design, sims = sims) The figure above may give us the impression that our estimate with clustered standard errors is less precise, when in fact, it correctly accounts for the uncertainty surrounding our estimates. The blue lines in the graph demonstrate the estimates from simulations which contain our estimand. As our table and graphs show, the share of these simulations over the total number of simulations, also known as coverage, is (correctly) close to 95% in estimations with clustered standard errors and 54% in estimations without clustered standard errors. As expected, the mean estimate itself and the bias is the same in both specifications. 12.1.2.3 Exercises Modify the declaration to change the distribution of \\(Y\\) from being uniform to something else: perhaps imagine that more extreme ideologies are more prevalent than moderate ones. Is the sample mean estimator still unbiased? Interpret your answer. Change the sampling procedure to favor units with higher values of ideology. Is the sample mean estimator still unbiased? Interpret your answer. Modify the estimation function to use this formula for the standard error: \\(\\widehat{se} \\equiv \\frac{\\widehat\\sigma}{\\sqrt{n}}\\). This equation differs from the one used in our declaration (it ignores the total population size \\(N\\)). Check that the coverage of this new design is incorrect when \\(N=n\\). Assess how large \\(N\\) has to be for the difference between these procedures not to matter. The intra-cluster correlation coefficient (ICC) can be calculated directly and is a feature of this design.↩ In ordinary least square (OLS) models, we assume errors are independent (error terms between individual observations are uncorrelated with each other) and homoskedastic (the size of errors is homogeneous across individuals). In reality, this is often not the case with cluster sampling.↩ "],
["multilevel-regression-and-poststratification.html", "12.2 Multilevel regression and poststratification", " 12.2 Multilevel regression and poststratification You can use the global bib file via rmarkdown cites like this: Imai, King, and Stuart (2008) district population_size prop_white prop_black prop_asian prop_hispanic_other prop_democrat prop_republican 1 41995 0.6848196 0.2414573 0.0325039 0.0500774 0.5185611 0.2436329 2 41076 0.2573035 0.6714870 0.0072305 0.0904421 0.7334309 0.0992582 3 40878 0.3384706 0.5112775 0.0085376 0.2235677 0.6786992 0.1176531 4 41287 0.8557415 0.0381718 0.0790564 0.0357498 0.3469342 0.3956847 5 40722 0.8473061 0.0709199 0.0597957 0.0208732 0.3942886 0.3638110 6 41985 0.8783613 0.0674765 0.0123854 0.0431821 0.4042878 0.3675094 # US population delaware_population_df &lt;- fabricate( data = delaware_senate_districts_df, individuals = add_level( N = population_size, race_white = rbinom(N, 1, prob = prop_white), race_black = rbinom(N, 1, prob = prop_black), race_asian = rbinom(N, 1, prob = prop_black), race_hispanic_other = rbinom(N, 1, prob = prop_hispanic_other), pid_republican = rbinom(N, 1, prob = prop_republican), pid_democrat = rbinom(N, 1, prob = prop_democrat) ) ) %&gt;% select(-starts_with(&quot;prop_&quot;), -population_size) # population weights for MRP mrp_weights &lt;- delaware_population_df %&gt;% group_by(district, race_white, race_black, race_asian, race_hispanic_other, pid_republican, pid_democrat) %&gt;% summarize(n_cell = n()) %&gt;% group_by(district) %&gt;% mutate(proportion_cell = n_cell/sum(n_cell)) %&gt;% select(-n_cell) %&gt;% ungroup delaware_population_df &lt;- mrp_weights %&gt;% select(district, proportion_cell) %&gt;% right_join(delaware_population_df) # Lax and Philips APSR 2009 # Policies are coded dichotomously, 1 for the progay policy and 0 otherwise: Adoption (9 states allow second-parent adoption in all jurisdictions) design &lt;- declare_population( data = delaware_population_df, districts = modify_level(district_effect = rnorm(N)), individuals = modify_level( noise = rnorm(N, mean = district_effect), policy_support = rbinom(N, 1, prob = pnorm( 0.25 + 0.2 * race_white - 0.1 * race_black - 0.2 * race_hispanic_other - 0.1 * pid_democrat + 0.15 * pid_republican + noise)) ) ) + declare_estimand(handler = function(data) { data %&gt;% group_by(district) %&gt;% summarize(estimand = mean(policy_support)) %&gt;% ungroup %&gt;% mutate(estimand_label = &quot;mean_policy_support&quot;) }) + declare_sampling(n = 500) + declare_estimator(handler = tidy_estimator(function(data) { data %&gt;% group_by(district) %&gt;% summarize(estimate = mean(policy_support)) }), label = &quot;strata_means&quot;, estimand = &quot;mean_policy_support&quot;) + # this estimator owes code to https://timmastny.rbind.io/blog/multilevel-mrp-tidybayes-brms-stan/ declare_estimator(handler = tidy_estimator(function(data) { model_fit &lt;- glmer( formula = policy_support ~ race_white + race_black + race_asian + race_hispanic_other + pid_democrat + pid_republican + (1 | district), data = data, family = binomial(link = &quot;logit&quot;)) data %&gt;% mutate( support_predicted = prediction(model_fit, data = ., allow.new.levels = TRUE, type = &quot;response&quot;), support_predicted_weighted = support_predicted * proportion_cell ) %&gt;% group_by(district) %&gt;% summarize(estimate = sum(support_predicted_weighted)) }), label = &quot;mrp_mle&quot;, estimand = &quot;mean_policy_support&quot;) dat &lt;- draw_data(design) draw_estimates(design) sims &lt;- simulate_design(design, sims = 3) diag &lt;- diagnose_design(design, sims = 100, diagnosands = declare_diagnosands(select = bias), add_grouping_variables = &quot;state&quot;) This chunk is set to echo = TRUE and eval = do_diagnosis simulations_pilot &lt;- simulate_design(design, sims = sims) Right after you do simulations, you want to save the simulations rds. Now all that simulating, saving, and loading is done, and we can use the simulations for whatever you want. kable(head(simulations_pilot)) design_label sim_ID estimator_label term estimate std.error statistic p.value conf.low conf.high df outcome design 1 estimator Z 0.9624445 0.1705951 5.641688 0.0000002 0.6234399 1.301449 88.32465 Y design 2 estimator Z 0.9532166 0.2124610 4.486548 0.0000200 0.5315217 1.374911 96.66334 Y design 3 estimator Z 0.9674071 0.2137695 4.525468 0.0000170 0.5431863 1.391628 97.96114 Y design 4 estimator Z 1.0545908 0.1942247 5.429747 0.0000004 0.6690878 1.440094 96.58766 Y design 5 estimator Z 1.0708566 0.1897958 5.642153 0.0000002 0.6942127 1.447501 97.99051 Y design 6 estimator Z 0.7197320 0.1964379 3.663916 0.0004076 0.3297870 1.109677 95.63827 Y References "],
["inference-about-unobserved-variables.html", "12.3 Inference about unobserved variables", " 12.3 Inference about unobserved variables "],
["structural-estimation.html", "12.4 Structural estimation", " 12.4 Structural estimation "],
["experimental-designs-for-descriptive-inference.html", "Chapter 13 Experimental designs for descriptive inference", " Chapter 13 Experimental designs for descriptive inference Section introduction "],
["audit-experiments.html", "13.1 Audit experiments", " 13.1 Audit experiments A basic requirement of a good research design is that the question it seeks to answer does in fact have an answer, at least under plausible models of the world. In our framework, this means that an inquiry \\(I\\) must have an associated answer \\(a^M\\), which refers to the answer under the model. Interestingly, we sometimes might not be conscious that the questions we ask do not have answers. Fortunately, when we ask a computer to answer such a question, it complains. How could a question not have an answer? Answerless questions can arise when inquiries depend on variables that do not exist or are undefined for some units. In other words, when there is a mismatch between the model and the inquiry, we’re asking a question about something that doesn’t exist. Consider an audit experiment (see Audit Experiment Design) that seeks to assess the effects of an email from a Latino name (versus a White name) on whether and how well election officials respond to requests for information. For example, do they use a positive or negative tone. These questions seem reasonable enough. The problem, however, is that if there are officials who don’t send responses, tone is undefined. More subtly, if there is an official that does send an email but would not have sent it in a different treatment condition, then tone is undefined for one of their potential outcomes. 13.1.1 Design Declaration Model: The model has two outcome variables, \\(R_i\\) and \\(Y_i\\). \\(R_i\\) stands for “response” and is equal to 1 if a response is sent, and 0 otherwise. \\(Y_i\\) is the tone of the response and is normally distributed when it is defined. \\(Z_i\\) is the treatment and equals 1 if the email is sent using a Latino name and 0 otherwise. The table below shows the potential outcomes for four possible types of subjects, depending on the potential outcomes of \\(R_i\\). A types always respond regardless of treatment and D types never respond, regardless of treatment. B types respond if and only if they are treated, whereas C types respond if and only if they are not treated. The table also includes columns for the potential outcomes of \\(Y_i\\), showing which potential outcome subjects would express depending on their type. The key thing to note is that for the B, C, and D types, the effect of treatment on \\(Y_i\\) is undefined because messages never sent have no tone. The last (and very important) feature of our model is that the outcomes \\(Y_i\\) are possibly correlated with subject type. Even though both \\(E[Y_i(1) | \\text{Type} = A]\\) and \\(E[Y_i(1) | \\text{Type} = B]\\) exist, there’s no reason to expect that they are the same. In the design we assume a distribution of types with 40% A, 5% B, 10% C, and 45% D. Causal Types Type \\(R_i(0)\\) \\(R_i(1)\\) \\(Y_i(0)\\) \\(Y_i(1)\\) A 1 1 \\(Y_i(0)\\) \\(Y_i(1)\\) B 0 1 NA \\(Y_i(1)\\) C 1 0 \\(Y_i(0)\\) NA D 0 0 NA NA Inquiry: We have two inquiries. The first is straightforward: \\(E[R_i(1) - R_i(0)]\\) is the Average Treatment Effect on response. The second inquiry is the undefined inquiry that does not have an answer: \\(E[Y_i(1) - Y_i(0)]\\). We will also consider a third inquiry, which is defined: \\(E[Y_i(1) - Y_i(0) | \\mathrm{Type} = A]\\), which is the average effect of treatment on tone among \\(A\\) types. Data strategy: The data strategy will be to use complete random assignment to assign 250 of 500 units to treatment. Answer strategy: We’ll try to answer all three inquiries with the difference-in-means estimator, but as the diagnosis will reveal, this strategy works well for some inquiries but not others. # Model ------------------------------------------------------------------- population &lt;- declare_population( N = 500, type = sample(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;), size = N, replace = TRUE, prob = c(.40, .05, .10, .45))) potential_outcomes &lt;- declare_potential_outcomes( R_Z_0 = type %in% c(&quot;A&quot;, &quot;C&quot;), R_Z_1 = type %in% c(&quot;A&quot;, &quot;B&quot;), Y_Z_0 = ifelse(R_Z_0, rnorm(n = sum(R_Z_0), mean = .1*(type == &quot;A&quot;) - 2*(type == &quot;C&quot;)), NA), Y_Z_1 = ifelse(R_Z_1, rnorm(n = sum(R_Z_1), mean = .2*(type == &quot;A&quot;) + 2*(type == &quot;B&quot;)), NA) ) # Inquiry ----------------------------------------------------------------- estimand_1 &lt;- declare_estimand(ATE_R = mean(R_Z_1 - R_Z_0)) estimand_2 &lt;- declare_estimand(ATE_Y = mean(Y_Z_1 - Y_Z_0)) estimand_3 &lt;- declare_estimand( ATE_Y_for_As = mean(Y_Z_1[type == &quot;A&quot;] - Y_Z_0[type == &quot;A&quot;])) # Data Strategy ----------------------------------------------------------- assignment &lt;- declare_assignment(m = 250) # Answer Strategy --------------------------------------------------------- estimator_1 &lt;- declare_estimator(R ~ Z, estimand = estimand_1, label = &quot;ATE_R&quot;) estimator_2 &lt;- declare_estimator(Y ~ Z, estimand = estimand_2, label = &quot;ATE_Y&quot;) estimator_3 &lt;- declare_estimator(Y ~ Z, estimand = estimand_3, label = &quot;ATE_YA&quot;) # Design ------------------------------------------------------------------ design &lt;- population + potential_outcomes + assignment + estimand_1 + estimand_2 + estimand_3 + declare_reveal(outcome_variables = c(&quot;R&quot;, &quot;Y&quot;)) + estimator_1 + estimator_2 + estimator_3 13.1.2 Takeaways We now diagnose the design: diagnosis &lt;- diagnose_design(design, sims = sims) Design Label Estimand Label Estimator Label Term N Sims Bias RMSE Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate Mean Estimand design ATE_R ATE_R Z 100 0.00 0.04 0.20 0.98 -0.05 0.04 0.04 0.00 -0.05 (0.00) (0.00) (0.04) (0.01) (0.00) (0.00) (0.00) (0.00) (0.00) design ATE_Y ATE_Y Z 100 NA NA 0.91 NA 0.54 0.19 0.15 NA NA NA NA (0.03) NA (0.02) (0.01) (0.00) NA NA design ATE_Y_for_As ATE_YA Z 100 0.31 0.34 0.91 0.52 0.54 0.19 0.15 0.04 0.22 (0.01) (0.01) (0.03) (0.04) (0.02) (0.01) (0.00) (0.02) (0.01) We learn three things from the design diagnosis. First, as expected, our experiment is unbiased for the average treatment effect on response. Next, we see that our second inquiry, as well as our diagnostics for it, are undefined. The diagnosis tells us that our definition of potential outcomes produces a definition problem for the estimand. Note that the diagnosands that are defined, including power, depend only on the answer strategy and not on the estimand. Finally, our third estimand – the average effects for the \\(A\\) types – is defined but our estimates are biased. The reason for this is that we cannot tell from the data which types are the \\(A\\) types: we are not conditioning on the correct subset. Indeed, we are unable to condition on the correct subset. If a subject responds in the treatment group, we don’t know if she is an \\(A\\) or a \\(B\\) type; in the control group, we can’t tell if a responder is an \\(A\\) or a \\(C\\) type. Our difference-in-means estimator of the ATE on \\(Y\\) among \\(A\\)s will be off whenever \\(A\\)s have different outcomes from \\(B\\)s and \\(C\\)s. In some cases, the problem might be resolved by changing the inquiry. Closely related estimands can often be defined, perhaps by redefining \\(Y\\) (e.g., emails never sent have a tone of zero). Some redefinitions of the problem, as in the one we examine above, require estimating effects for unobserved subgroups which is a difficult challenge. 13.1.3 Applications This kind of problem is surprisingly common. Here are three more distinct instances of the problem: \\(Y\\) is the decision to vote Democrat (\\(Y=1\\)) or Republican (\\(Y=0\\)), \\(R\\) is the decision to turn out to vote and \\(Z\\) is a campaign message. The decision to vote may depend on treatment but if subjects do not vote then \\(Y\\) is undefined. \\(Y\\) is the weight of infants, \\(R\\) is whether a child is born and \\(Z\\) is a maternal health intervention. Fertility may depend on treatment but the weight of unborn (possibly never conceived) babies is not defined. \\(Y\\) is the charity to whom contributions are made during fundraising and \\(R\\) is whether anything is contributed and \\(Z\\) is an encouragement to contribute. The identity of beneficiaries is not defined if there are no contributions. All of these problem exhibit a form of post treatment bias (see section Post treatment bias) but the issue goes beyond picking the right estimator. Our problem here is conceptual: the effect of treatment on the outcome just doesn’t exist for some subjects. 13.1.4 Exercises The amount of bias on the third estimand depends on both the distribution of types and the correlation of types with the potential outcomes of Y. Modify the declaration so that the estimator of the effect on Y is unbiased, changing only the distribution of types. Repeat the exercise, changing only the correlation of type with the potential outcomes of \\(Y\\). Try approaching the problem by redefining the inquiry, seeking to assess the effect of treatment on the share of responses with positive tone. "],
["experiments-for-sensitive-questions.html", "13.2 Experiments for sensitive questions", " 13.2 Experiments for sensitive questions setup: a descriptive estimand, the proportion holding sensitive characteristic; two experimental designs to recover it, list experiments and randomized response if identification assumptions are violated (focus on ceiling/floor), estimates of ATE still unbiased but not for the descriptive estimand compare design where the ceiling/floor categories are minimized through Glynn (2013) design advice to use negatively-correlated items and a high prevalence and a low prevalence item both designs exhibit bias-variance tradeoff (more control of variance with RR) 13.2.1 List experiments Sometimes, subjects might not tell the truth when asked about certain attitudes or behaviors. Responses may be affected by sensitivity bias, or the tendancy of survey subjects to dissemble for fear of negative repercussions if some reference group learns their true response (Blair, Coppock, and Moor 2018). In such cases, standard survey estimates based on direct questions will be biased. One class of solutions to this problem is to obscure individual responses, providing protection from social or legal pressures. When we obscure responses systematically through an experiment, we can often still identify average quantities of interest. One such design is the list experiment (introduced by Miller (1984)), which asks respondents for the count of the number of `yes’ responses to a series of questions including the sensitive item, rather than for a yes or no answer on the sensitive item itself. List experiments give subjects cover by aggregating their answer to the sensitive item with responses to other questions. During the 2016 Presidential Election in the U.S., some observers were concerned that pre-election estimates of support for Donald Trump might have been downwardly biased by “Shy Trump Supporters” – survey respondents who supported Trump in their hearts, but were embarrased to admit it to pollsters. To assess this possibility, Coppock (2017) obtained estimates of Trump support that were free of social desirability bias using a list experiment. Subjects in the control and treatment groups were asked: “Here is a list of [three/four] things that some people would do and some people would not. Please tell me HOW MANY of them you would do. We do not want to know which ones of these you would do, just how many. Here are the [three/four] things:” Control Treatment If it were up for a vote, I would vote to raise the minimum wage to 15 dollars an hour If it were up for a vote, I would vote to raise the minimum wage to 15 dollars an hour If it were up for a vote, I would vote to repeal the Affordable Care Act, also known as Obamacare If it were up for a vote, I would vote to repeal the Affordable Care Act, also known as Obamacare If it were up for a vote, I would vote to ban assault weapons If it were up for a vote, I would vote to ban assault weapons If the 2016 presidential election were being held today and the candidates were Hillary Clinton (Democrat) and Donald Trump (Republican), I would vote for Donald Trump. The treatment group averaged 1.843 items while the control group averaged 1.548 items, for a difference-in-means estimate of support for Donald Trump of 29.6% (note that this estimate is representative of US adults and not of US adults who would actually vote). The trouble with this estimate is that, while it’s plausibly free from social desirability bias, it’s also much higher variance. The 95% confidence interval for the list experiment estimate is nearly 14 percentage points wide, whereas the the 95% confidence interval for the (possibly biased!) direct question asked of the same sample is closer to 4 percentage points. The choice between list experiments and direct question is therefore a bias-variance tradeoff. List experiments may have less bias, but they are higher variance. Direct questions may be biased, but they have less variance. 13.2.1.1 Declaration Model: Our model includes subjects’ true support for Donald Trump and whether or not they are “shy”. These two variables combine to determine how subjects will respond when asked directly about Trump support. The potential outcomes model combines three types of information to determine how subjects will respond to the list experiment: their responses to the three nonsensitive control items, their true support for Trump, and whether they are assigned to see the treatment or the control list. Notice that our definition of the potential outcomes embeds the “No Liars” and “No Design Effects” assumptions required for the list experiment design (see Blair and Imai 2012 for more on these assumptions). We also have a global parameter that reflects our expectations about the proportion of Trump supporters who are shy. It’s set at 6%, which is large enough to make a difference for polling, but not so large as to be implausible. Inquiry: Our estimand is the proportion of voters who actually plan to vote for Trump. Data strategy: First we sample 500 respondents from the U.S. population at random, then we randomly assign 250 of the 500 to treatment and the remainder to control. In the survey, we ask subjects both the direct question and the list experiment question. Answer strategy: We estimate the proportion of truthful Trump voters in two ways. First, we take the mean of answers to the direct question. Second, we take the difference in means in the responses to the list experiment question. # Model ------------------------------------------------------------------- proportion_shy &lt;- .06 list_design &lt;- # Model declare_population( N = 5000, # true trump vote (unobservable) truthful_trump_vote = draw_binary(.45, N), # shy voter (unobservable) shy = draw_binary(proportion_shy, N), # direct question response (1 if Trump supporter and not shy, 0 otherwise) Y_direct = if_else(truthful_trump_vote == 1 &amp; shy == 0, 1, 0), # nonsensitive list experiment items raise_minimum_wage = draw_binary(.8, N), repeal_obamacare = draw_binary(.6, N), ban_assault_weapons = draw_binary(.5, N) ) + declare_potential_outcomes( Y_list_Z_0 = raise_minimum_wage + repeal_obamacare + ban_assault_weapons, Y_list_Z_1 = Y_list_Z_0 + truthful_trump_vote ) + # Inquiry declare_estimand(proportion_truthful_trump_vote = mean(truthful_trump_vote), ATE = mean(Y_list_Z_1 - Y_list_Z_0)) + # Data Strategy declare_sampling(n = 500) + declare_assignment(prob = .5) + declare_reveal(Y_list) + # Answer Strategy declare_estimator( Y_direct ~ 1, model = lm_robust, term = &quot;(Intercept)&quot;, estimand = &quot;proportion_truthful_trump_vote&quot;, label = &quot;direct&quot;) + declare_estimator( Y_list ~ Z, model = difference_in_means, estimand = c(&quot;proportion_truthful_trump_vote&quot;, &quot;ATE&quot;), label = &quot;list&quot;) simulations_list &lt;- simulate_design(list_design, sims = sims) The plot shows the sampling distribution of the direct and list experimetn estimators. The sampling distribution of the direct question is tight but biased; the list experiment (if the requisite assumptions hold) is unbiased, but higher variance. The choice between these two estimators of the prevalence rate depends on which – bias or variance – is more important in a particular setting. See Blair, Coppock, and Moor (2018) for an extended discussion of how the choice of research design depends deeply on the purpose of the project. 13.2.1.2 Violations of identifying assumptions list_design_ceiling &lt;- replace_step( list_design, step = 2, new_step = declare_potential_outcomes( Y_list_Z_0 = raise_minimum_wage + repeal_obamacare + ban_assault_weapons, Y_list_Z_1_no_liars = Y_list_Z_0 + truthful_trump_vote, Y_list_Z_1 = ifelse(Y_list_Z_1_no_liars == 4, 3, Y_list_Z_1_no_liars) ) ) diagnosis_list_ceiling &lt;- diagnose_design(list_design_ceiling, sims = sims, bootstrap_sims = b_sims) kable(diagnosis_list_ceiling %&gt;% get_diagnosands %&gt;% select(estimator_label, estimand_label, bias, rmse)) estimator_label estimand_label bias rmse list ATE -0.0004244 0.0749080 direct proportion_truthful_trump_vote -0.0266028 0.0343415 list proportion_truthful_trump_vote -0.1084868 0.1318557 See Blair and Imai (2012) and Li (2019) for methods for addressing violations no liars assumption through modeling and bounds. Li, Y. (n.d.). Relaxing the No Liars Assumption in List Experiment Analyses. Political Analysis, 1-16. doi:10.1017/pan.2019.7 13.2.1.3 Mitigating the risk of ceiling effects Glynn (2013) list_design_glynn &lt;- replace_step( list_design, step = 1, new_step = declare_population( N = 5000, # true trump vote (unobservable) truthful_trump_vote = draw_binary(0.45, N), # shy voter (unobservable) shy = draw_binary(proportion_shy, N), # direct question response (1 if Trump supporter and not shy, 0 otherwise) Y_direct = if_else(truthful_trump_vote == 1 &amp; shy == 0, 1, 0), list2_item1 = draw_binary(0.5, N), list2_item2 = correlate(given = list2_item1, rho = -.5, draw_binary, prob = 0.5), list2_item3 = draw_binary(0.1, N) # low prevalence ) ) list_design_glynn &lt;- replace_step( list_design_glynn, step = 2, declare_potential_outcomes( Y_list_Z_0 = list2_item1 + list2_item2 + list2_item3, Y_list_Z_1_no_liars = Y_list_Z_0 + truthful_trump_vote, Y_list_Z_1 = ifelse(Y_list_Z_1_no_liars == 4, 3, Y_list_Z_1_no_liars) ) ) diagnosis_list_glynn &lt;- diagnose_design(list_design_glynn, sims = sims, bootstrap_sims = b_sims) kable(diagnosis_list_glynn %&gt;% get_diagnosands %&gt;% filter(estimator_label == &quot;list&quot;) %&gt;% select(estimator_label, bias, rmse)) estimator_label bias rmse list 0.0009464 0.0699248 list -0.0068716 0.0702280 13.2.2 Randomized response technique library(rr) rr_forced_known &lt;- function(data) { fit &lt;- try(rrreg(Y_forced_known ~ 1, data = data, p = 2/3, p0 = 1/6, p1 = 1/6, design = &quot;forced-known&quot;)) pred &lt;- try(as.data.frame(predict(fit, avg = TRUE, quasi.bayes = TRUE))) if(class(fit) != &quot;try-error&quot; &amp; class(pred) != &quot;try-error&quot;) { names(pred) &lt;- c(&quot;estimate&quot;, &quot;std.error&quot;, &quot;conf.low&quot;, &quot;conf.high&quot;) pred$p.value &lt;- with(pred, 2 * pnorm(-abs(estimate / std.error))) } else { pred &lt;- data.frame(estimate = NA, std.error = NA, conf.low = NA, conf.high = NA, p.value = NA, error = TRUE) } pred } rr_mirrored &lt;- function(data) { fit &lt;- try(rrreg(Y_mirrored ~ 1, data = data, p = 2/3, design = &quot;mirrored&quot;)) pred &lt;- try(as.data.frame(predict(fit, avg = TRUE, quasi.bayes = TRUE))) if(class(fit) != &quot;try-error&quot; &amp; class(pred) != &quot;try-error&quot;) { names(pred) &lt;- c(&quot;estimate&quot;, &quot;std.error&quot;, &quot;conf.low&quot;, &quot;conf.high&quot;) pred$p.value &lt;- with(pred, 2 * pnorm(-abs(estimate / std.error))) } else { pred &lt;- data.frame(estimate = NA, std.error = NA, conf.low = NA, conf.high = NA, p.value = NA, error = TRUE) } pred } proportion_shy &lt;- .06 rr_design &lt;- declare_population( N = 100, # true trump vote (unobservable) truthful_trump_vote = draw_binary(.45, N), # shy voter (unobservable) shy = draw_binary(proportion_shy, N), # Direct question response (1 if Trump supporter and not shy, 0 otherwise) Y_direct = as.numeric(truthful_trump_vote == 1 &amp; shy == 0)) + declare_estimand(sensitive_item_proportion = mean(truthful_trump_vote)) + declare_potential_outcomes(Y_forced_known ~ (dice == 1) * 0 + (dice %in% 2:5) * truthful_trump_vote + (dice == 6) * 1, conditions = 1:6, assignment_variable = &quot;dice&quot;) + declare_potential_outcomes(Y_mirrored ~ (coin == &quot;heads&quot;) * truthful_trump_vote + (coin == &quot;tails&quot;) * (1 - truthful_trump_vote), conditions = c(&quot;heads&quot;, &quot;tails&quot;), assignment_variable = &quot;coin&quot;) + declare_assignment(prob_each = rep(1/6, 6), conditions = 1:6, assignment_variable = &quot;dice&quot;) + declare_assignment(prob_each = c(2/3, 1/3), conditions = c(&quot;heads&quot;, &quot;tails&quot;), assignment_variable = &quot;coin&quot;) + declare_reveal(Y_forced_known, dice) + declare_reveal(Y_mirrored, coin) + declare_estimator(handler = tidy_estimator(rr_forced_known), label = &quot;forced_known&quot;, estimand = &quot;sensitive_item_proportion&quot;) + declare_estimator(handler = tidy_estimator(rr_mirrored), label = &quot;mirrored&quot;, estimand = &quot;sensitive_item_proportion&quot;) + declare_estimator(Y_direct ~ 1, model = lm_robust, term = &quot;(Intercept)&quot;, label = &quot;direct&quot;, estimand = &quot;sensitive_item_proportion&quot;) rr_design &lt;- set_diagnosands(rr_design, diagnosands = declare_diagnosands(select = c(mean_estimate, bias, rmse, power))) rr_diagnosis &lt;- diagnose_design(rr_design, sims = sims, bootstrap_sims = b_sims) kable(reshape_diagnosis(rr_diagnosis)) Design Label Estimand Label Estimator Label Term N Sims Mean Estimate Bias RMSE Power rr_design sensitive_item_proportion direct (Intercept) 500 0.42 -0.03 0.03 1.00 (0.00) (0.00) (0.00) (0.00) rr_design sensitive_item_proportion forced_known NA 500 0.45 0.00 0.04 1.00 (0.00) (0.00) (0.00) (0.00) rr_design sensitive_item_proportion mirrored NA 500 0.46 0.01 0.13 0.91 (0.01) (0.00) (0.00) (0.01) 13.2.2.1 Bias-variance tradeoff rr_designs &lt;- redesign(rr_design, proportion_shy = c(0, 0.1, 0.25, 0.5), N = c(500, 1000, 2000, 5000)) rr_tradeoff_diagnosis &lt;- diagnose_design(rr_designs, sims = sims, bootstrap_sims = b_sims) # make a plot kable(reshape_diagnosis(rr_tradeoff_diagnosis)) Design Label proportion_shy N Estimand Label Estimator Label Term N Sims Mean Estimate Bias RMSE Power design_1 0 500 sensitive_item_proportion direct (Intercept) 500 0.45 -0.00 0.00 1.00 (0.00) (0.00) (0.00) (0.00) design_1 0 500 sensitive_item_proportion forced_known NA 500 0.45 -0.00 0.04 1.00 (0.00) (0.00) (0.00) (0.00) design_1 0 500 sensitive_item_proportion mirrored NA 500 0.45 0.00 0.13 0.88 (0.01) (0.01) (0.00) (0.01) design_2 0.1 500 sensitive_item_proportion direct (Intercept) 500 0.40 -0.05 0.05 1.00 (0.00) (0.00) (0.00) (0.00) design_2 0.1 500 sensitive_item_proportion forced_known NA 500 0.45 0.00 0.04 1.00 (0.00) (0.00) (0.00) (0.00) design_2 0.1 500 sensitive_item_proportion mirrored NA 500 NA NA NA NA NA NA NA NA design_3 0.25 500 sensitive_item_proportion direct (Intercept) 500 0.34 -0.11 0.12 1.00 (0.00) (0.00) (0.00) (0.00) design_3 0.25 500 sensitive_item_proportion forced_known NA 500 0.45 0.00 0.04 1.00 (0.00) (0.00) (0.00) (0.00) design_3 0.25 500 sensitive_item_proportion mirrored NA 500 0.45 0.00 0.13 0.90 (0.01) (0.01) (0.00) (0.01) design_4 0.5 500 sensitive_item_proportion direct (Intercept) 500 0.22 -0.22 0.23 1.00 (0.00) (0.00) (0.00) (0.00) design_4 0.5 500 sensitive_item_proportion forced_known NA 500 0.45 0.00 0.03 1.00 (0.00) (0.00) (0.00) (0.00) design_4 0.5 500 sensitive_item_proportion mirrored NA 500 NA NA NA NA NA NA NA NA design_5 0 1000 sensitive_item_proportion direct (Intercept) 500 0.45 -0.00 0.00 1.00 (0.00) (0.00) (0.00) (0.00) design_5 0 1000 sensitive_item_proportion forced_known NA 500 0.45 0.00 0.03 1.00 (0.00) (0.00) (0.00) (0.00) design_5 0 1000 sensitive_item_proportion mirrored NA 500 NA NA NA NA NA NA NA NA design_6 0.1 1000 sensitive_item_proportion direct (Intercept) 500 0.40 -0.05 0.05 1.00 (0.00) (0.00) (0.00) (0.00) design_6 0.1 1000 sensitive_item_proportion forced_known NA 500 0.45 0.00 0.03 1.00 (0.00) (0.00) (0.00) (0.00) design_6 0.1 1000 sensitive_item_proportion mirrored NA 500 NA NA NA NA NA NA NA NA design_7 0.25 1000 sensitive_item_proportion direct (Intercept) 500 0.34 -0.11 0.12 1.00 (0.00) (0.00) (0.00) (0.00) design_7 0.25 1000 sensitive_item_proportion forced_known NA 500 0.45 0.00 0.04 1.00 (0.00) (0.00) (0.00) (0.00) design_7 0.25 1000 sensitive_item_proportion mirrored NA 500 NA NA NA NA NA NA NA NA design_8 0.5 1000 sensitive_item_proportion direct (Intercept) 500 0.22 -0.22 0.23 1.00 (0.00) (0.00) (0.00) (0.00) design_8 0.5 1000 sensitive_item_proportion forced_known NA 500 0.45 -0.00 0.03 1.00 (0.00) (0.00) (0.00) (0.00) design_8 0.5 1000 sensitive_item_proportion mirrored NA 500 0.45 0.01 0.12 0.91 (0.01) (0.01) (0.00) (0.01) design_9 0 2000 sensitive_item_proportion direct (Intercept) 500 0.45 -0.00 0.00 1.00 (0.00) (0.00) (0.00) (0.00) design_9 0 2000 sensitive_item_proportion forced_known NA 500 0.45 -0.00 0.03 1.00 (0.00) (0.00) (0.00) (0.00) design_9 0 2000 sensitive_item_proportion mirrored NA 500 NA NA NA NA NA NA NA NA design_10 0.1 2000 sensitive_item_proportion direct (Intercept) 500 0.41 -0.05 0.05 1.00 (0.00) (0.00) (0.00) (0.00) design_10 0.1 2000 sensitive_item_proportion forced_known NA 500 0.45 -0.00 0.03 1.00 (0.00) (0.00) (0.00) (0.00) design_10 0.1 2000 sensitive_item_proportion mirrored NA 500 NA NA NA NA NA NA NA NA design_11 0.25 2000 sensitive_item_proportion direct (Intercept) 500 0.34 -0.11 0.12 1.00 (0.00) (0.00) (0.00) (0.00) design_11 0.25 2000 sensitive_item_proportion forced_known NA 500 0.46 0.00 0.04 1.00 (0.00) (0.00) (0.00) (0.00) design_11 0.25 2000 sensitive_item_proportion mirrored NA 500 0.46 0.01 0.13 0.93 (0.01) (0.01) (0.00) (0.01) design_12 0.5 2000 sensitive_item_proportion direct (Intercept) 500 0.23 -0.23 0.23 1.00 (0.00) (0.00) (0.00) (0.00) design_12 0.5 2000 sensitive_item_proportion forced_known NA 500 0.45 0.00 0.04 1.00 (0.00) (0.00) (0.00) (0.00) design_12 0.5 2000 sensitive_item_proportion mirrored NA 500 0.46 0.01 0.14 0.88 (0.00) (0.01) (0.00) (0.01) design_13 0 5000 sensitive_item_proportion direct (Intercept) 500 0.45 -0.00 0.00 1.00 (0.00) (0.00) (0.00) (0.00) design_13 0 5000 sensitive_item_proportion forced_known NA 500 0.45 -0.00 0.03 1.00 (0.00) (0.00) (0.00) (0.00) design_13 0 5000 sensitive_item_proportion mirrored NA 500 0.47 0.02 0.12 0.91 (0.01) (0.01) (0.00) (0.01) design_14 0.1 5000 sensitive_item_proportion direct (Intercept) 500 0.41 -0.04 0.05 1.00 (0.00) (0.00) (0.00) (0.00) design_14 0.1 5000 sensitive_item_proportion forced_known NA 500 0.46 0.00 0.03 1.00 (0.00) (0.00) (0.00) (0.00) design_14 0.1 5000 sensitive_item_proportion mirrored NA 500 NA NA NA NA NA NA NA NA design_15 0.25 5000 sensitive_item_proportion direct (Intercept) 500 0.34 -0.11 0.12 1.00 (0.00) (0.00) (0.00) (0.00) design_15 0.25 5000 sensitive_item_proportion forced_known NA 500 0.45 0.00 0.04 1.00 (0.00) (0.00) (0.00) (0.00) design_15 0.25 5000 sensitive_item_proportion mirrored NA 500 NA NA NA NA NA NA NA NA design_16 0.5 5000 sensitive_item_proportion direct (Intercept) 500 0.22 -0.22 0.23 1.00 (0.00) (0.00) (0.00) (0.00) design_16 0.5 5000 sensitive_item_proportion forced_known NA 500 0.45 0.00 0.03 1.00 (0.00) (0.00) (0.00) (0.00) design_16 0.5 5000 sensitive_item_proportion mirrored NA 500 0.46 0.01 0.12 0.93 (0.00) (0.00) (0.00) (0.01) 13.2.3 References References "],
["conjoint-experimetns.html", "13.3 Conjoint experimetns", " 13.3 Conjoint experimetns You can use the global bib file via rmarkdown cites like this: Imai, King, and Stuart (2008) design &lt;- declare_population(N = 100, u = rnorm(N)) + declare_potential_outcomes(Y ~ Z + u) + declare_assignment(prob = 0.5) + declare_reveal(Y, Z) + declare_estimator(Y ~ Z, model = difference_in_means) This chunk is set to echo = TRUE and eval = do_diagnosis simulations_pilot &lt;- simulate_design(design, sims = sims) Right after you do simulations, you want to save the simulations rds. Now all that simulating, saving, and loading is done, and we can use the simulations for whatever you want. kable(head(simulations_pilot)) design_label sim_ID estimator_label term estimate std.error statistic p.value conf.low conf.high df outcome design 1 estimator Z 0.9624445 0.1705951 5.641688 0.0000002 0.6234399 1.301449 88.32465 Y design 2 estimator Z 0.9532166 0.2124610 4.486548 0.0000200 0.5315217 1.374911 96.66334 Y design 3 estimator Z 0.9674071 0.2137695 4.525468 0.0000170 0.5431863 1.391628 97.96114 Y design 4 estimator Z 1.0545908 0.1942247 5.429747 0.0000004 0.6690878 1.440094 96.58766 Y design 5 estimator Z 1.0708566 0.1897958 5.642153 0.0000002 0.6942127 1.447501 97.99051 Y design 6 estimator Z 0.7197320 0.1964379 3.663916 0.0004076 0.3297870 1.109677 95.63827 Y References "],
["behavioral-games.html", "13.4 Behavioral games", " 13.4 Behavioral games "],
["observational-designs-for-causal-inference.html", "Chapter 14 Observational designs for causal inference", " Chapter 14 Observational designs for causal inference section introduction "],
["selection-on-observables.html", "14.1 Selection on observables", " 14.1 Selection on observables (matching and regression etc.) 14.1.1 Classic Confounding We want to know the effect of Z on Y, but it’s confounded by X DIM is biased, OLS is unbiased because we happen to get the functional forms right enough. Figure 14.1: DAG with one observed confounder design_1 &lt;- declare_population(N = 100, U_z = rnorm(N), U_x = rnorm(N), U_y = rnorm(N), X = U_x) + declare_potential_outcomes(Y ~ 0.5*Z + X + U_y) + declare_estimand(ATE = mean(Y_Z_1 - Y_Z_0)) + declare_assignment(prob_unit = pnorm(U_z + U_x), simple = TRUE) + declare_estimator(Y ~ Z, estimand = &quot;ATE&quot;, label = &quot;DIM&quot;) + declare_estimator(Y ~ Z + X, model = lm, estimand = &quot;ATE&quot;, label = &quot;OLS&quot;) dx_1 &lt;- diagnose_design(design_1, sims = sims, bootstrap_sims = b_sims) dx_1 ## ## Research design diagnosis based on 100 simulations. Diagnosand estimates with bootstrapped standard errors in parentheses (20 replicates). ## ## Design Label Estimand Label Estimator Label Term N Sims Bias RMSE ## design_1 ATE DIM Z 100 0.96 0.99 ## (0.02) (0.02) ## design_1 ATE OLS Z 100 0.01 0.23 ## (0.02) (0.01) ## Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate ## 1.00 0.05 1.46 0.27 0.27 0.00 ## (0.00) (0.02) (0.02) (0.01) (0.00) (0.00) ## 0.61 0.96 0.51 0.23 0.23 0.00 ## (0.03) (0.02) (0.02) (0.01) (0.00) (0.00) ## Mean Estimand ## 0.50 ## (0.00) ## 0.50 ## (0.00) 14.1.2 What if the functional form is wrong? Oh no, the functional form is wrong, so even though we’re controlling for all confounders, there’s still bias. Solution: matching might do a better job since it’s sort of a “nonparametric” form of covariate control. design_2 &lt;- declare_population(N = 100, U_z = rnorm(N), U_x = rnorm(N), U_y = rnorm(N), X = U_x) + declare_potential_outcomes(Y ~ 0.5*Z + X + X^2 + U_y) + declare_estimand(ATE = mean(Y_Z_1 - Y_Z_0)) + declare_assignment(prob_unit = pnorm(U_z + U_x + U_x^2), simple = TRUE) + declare_estimator(Y ~ Z, estimand = &quot;ATE&quot;, label = &quot;DIM&quot;) + declare_estimator(Y ~ Z + X, model = lm, estimand = &quot;ATE&quot;, label = &quot;OLS&quot;) dx_2 &lt;- diagnose_design(design_2, sims = sims, bootstrap_sims = b_sims) dx_2 ## ## Research design diagnosis based on 100 simulations. Diagnosand estimates with bootstrapped standard errors in parentheses (20 replicates). ## ## Design Label Estimand Label Estimator Label Term N Sims Bias RMSE ## design_2 ATE DIM Z 100 1.30 1.34 ## (0.03) (0.04) ## design_2 ATE OLS Z 100 0.75 0.84 ## (0.02) (0.03) ## Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate ## 1.00 0.03 1.80 0.35 0.33 0.00 ## (0.00) (0.02) (0.03) (0.03) (0.00) (0.00) ## 0.91 0.44 1.25 0.38 0.36 0.00 ## (0.03) (0.04) (0.02) (0.04) (0.01) (0.00) ## Mean Estimand ## 0.50 ## (0.00) ## 0.50 ## (0.00) 14.1.3 What if you have unobserved confounding? Figure 14.2: DAG with unobserved confounding design_3 &lt;- declare_population(N = 100, U_z = rnorm(N), U_x = rnorm(N), U_y = correlate(rnorm, given = U_z, rho = 0.9), X = U_x) + declare_potential_outcomes(Y ~ 0.5*Z + X + U_y) + declare_estimand(ATE = mean(Y_Z_1 - Y_Z_0)) + declare_assignment(prob_unit = pnorm(U_z + U_x), simple = TRUE) + declare_estimator(Y ~ Z, estimand = &quot;ATE&quot;, label = &quot;DIM&quot;) + declare_estimator(Y ~ Z + X, model = lm, estimand = &quot;ATE&quot;, label = &quot;OLS&quot;) dx_3 &lt;- diagnose_design(design_3, sims = sims, bootstrap_sims = b_sims) dx_3 ## ## Research design diagnosis based on 100 simulations. Diagnosand estimates with bootstrapped standard errors in parentheses (20 replicates). ## ## Design Label Estimand Label Estimator Label Term N Sims Bias RMSE ## design_3 ATE DIM Z 100 1.73 1.74 ## (0.02) (0.02) ## design_3 ATE OLS Z 100 1.02 1.03 ## (0.02) (0.02) ## Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate ## 1.00 0.00 2.23 0.20 0.22 0.00 ## (0.00) (0.00) (0.02) (0.01) (0.00) (0.00) ## 1.00 0.00 1.52 0.16 0.19 0.00 ## (0.00) (0.00) (0.02) (0.01) (0.00) (0.00) ## Mean Estimand ## 0.50 ## (0.00) ## 0.50 ## (0.00) 14.1.4 What if the observed covariate is post-treatment? Figure 14.3: DAG with one observed mediator design_4 &lt;- declare_population(N = 100, U_z = rnorm(N), U_m = rnorm(N), U_y = rnorm(N)) + declare_potential_outcomes(M ~ 0.5*Z + U_m) + declare_potential_outcomes(Y ~ 0.5*Z + (0.5*Z + U_m) + U_y) + declare_assignment(prob_unit = pnorm(U_z), simple = TRUE) + declare_reveal(c(M, Y), Z) + declare_estimand(ATE = mean(Y_Z_1 - Y_Z_0)) + declare_estimator(Y ~ Z, estimand = &quot;ATE&quot;, label = &quot;DIM&quot;) + declare_estimator(Y ~ Z + M, model = lm, estimand = &quot;ATE&quot;, label = &quot;OLS&quot;) dx_4 &lt;- diagnose_design(design_4, sims = sims, bootstrap_sims = b_sims) dx_4 ## ## Research design diagnosis based on 100 simulations. Diagnosand estimates with bootstrapped standard errors in parentheses (20 replicates). ## ## Design Label Estimand Label Estimator Label Term N Sims Bias RMSE ## design_4 ATE DIM Z 100 0.04 0.29 ## (0.03) (0.02) ## design_4 ATE OLS Z 100 -0.49 0.54 ## (0.02) (0.02) ## Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate ## 0.97 0.91 1.04 0.29 0.28 0.00 ## (0.02) (0.02) (0.03) (0.02) (0.00) (0.00) ## 0.65 0.37 0.51 0.23 0.21 0.00 ## (0.06) (0.04) (0.02) (0.02) (0.00) (0.00) ## Mean Estimand ## 1.00 ## (0.00) ## 1.00 ## (0.00) "],
["instrumental-variables.html", "14.2 Instrumental variables", " 14.2 Instrumental variables This one with continuous instruments You can use the global bib file via rmarkdown cites like this: Imai, King, and Stuart (2008) design &lt;- declare_population(N = 100, u = rnorm(N)) + declare_potential_outcomes(Y ~ Z + u) + declare_assignment(prob = 0.5) + declare_reveal(Y, Z) + declare_estimator(Y ~ Z, model = difference_in_means) This chunk is set to echo = TRUE and eval = do_diagnosis simulations_pilot &lt;- simulate_design(design, sims = sims) Right after you do simulations, you want to save the simulations rds. Now all that simulating, saving, and loading is done, and we can use the simulations for whatever you want. kable(head(simulations_pilot)) design_label sim_ID estimator_label term estimate std.error statistic p.value conf.low conf.high df outcome design 1 estimator Z 0.9624445 0.1705951 5.641688 0.0000002 0.6234399 1.301449 88.32465 Y design 2 estimator Z 0.9532166 0.2124610 4.486548 0.0000200 0.5315217 1.374911 96.66334 Y design 3 estimator Z 0.9674071 0.2137695 4.525468 0.0000170 0.5431863 1.391628 97.96114 Y design 4 estimator Z 1.0545908 0.1942247 5.429747 0.0000004 0.6690878 1.440094 96.58766 Y design 5 estimator Z 1.0708566 0.1897958 5.642153 0.0000002 0.6942127 1.447501 97.99051 Y design 6 estimator Z 0.7197320 0.1964379 3.663916 0.0004076 0.3297870 1.109677 95.63827 Y References "],
["difference-in-differences.html", "14.3 Difference in differences", " 14.3 Difference in differences # simulations_pilot &lt;- simulate_design(design, sims = sims) 14.3.1 Two-period two-group setting Show that comparison of T and C in period 2 is biased and comparison of T between period 1 and 2 is biased, but DiD unbiased in presence of confounding in treatment assignment (unit with higher unit shock is always treated) and time trends N_units &lt;- 2 N_time_periods &lt;- 2 two_period_design &lt;- declare_population( units = add_level(N = N_units, unit_shock = rnorm(N)), periods = add_level(N = N_time_periods, nest = FALSE, time = (1:N_time_periods) - N_time_periods + 1), unit_period = cross_levels(by = join(units, periods), unit_time_shock = rnorm(N)) ) + # internal note: the unbiasedness obtains whether or not there is a unit-time shock declare_potential_outcomes( Y_Z_0 = unit_shock + 0.5 * time + unit_time_shock, # common pretreatment trend Y_Z_1 = Y_Z_0 + 0.2) + declare_estimand(ATE = mean(Y_Z_1 - Y_Z_0), subset = time == 1) + declare_assignment(Z = unit_shock == max(unit_shock), handler = mutate) + declare_reveal( Y = case_when(Z == 0 | time &lt; 1 ~ Y_Z_0, TRUE ~ Y_Z_1), handler = mutate) + declare_estimator(estimate = (mean(Y[Z == 1 &amp; time == 1]) - mean(Y[Z == 0 &amp; time == 1])) - (mean(Y[Z == 1 &amp; time == 0]) - mean(Y[Z == 0 &amp; time == 0])), estimator_label = &quot;DiD&quot;, handler = summarize, label = &quot;DiD&quot;) + declare_estimator(estimate = mean(Y[Z == 1 &amp; time == 1]) - mean(Y[Z == 1 &amp; time == 0]), estimator_label = &quot;Diff&quot;, handler = summarize, label = &quot;Diff&quot;) + declare_estimator(estimate = mean(Y[Z == 1 &amp; time == 1]) - mean(Y[Z == 0 &amp; time == 1]), estimator_label = &quot;DiM&quot;, handler = summarize, label = &quot;DiM&quot;) # diagnosis &lt;- diagnose_design( # two_period_design, diagnosands = declare_diagnosands(select = bias), # sims = 1000, bootstrap_sims = 1000) 14.3.2 Parallel trends assumption Introduce assumption and visual test set.seed(2) draw_data(two_period_design) %&gt;% ggplot(aes(time, Y, color = as.factor(Z))) + geom_line() Show that evaluating parallel trends assumption by looking at a single pretreatment time period is flawed 14.3.3 Multi-period design Switch to regression context with 20 periods, 100 units and show same results hold with two-way FE (controlling for one period before T is insufficient to remove bias) N_units &lt;- 20 N_time_periods &lt;- 20 multi_period_design &lt;- declare_population( units = add_level(N = N_units, unit_shock = rnorm(N), unit_treated = 1*(unit_shock &gt; median(unit_shock)), unit_treatment_start = sample(2:(N_time_periods - 1) - N_time_periods + 1, N, replace = TRUE)), periods = add_level(N = N_time_periods, nest = FALSE, time = (1:N_time_periods) - N_time_periods + 1), unit_period = cross_levels(by = join(units, periods), noise = rnorm(N), pretreatment = 1*(time &lt; unit_treatment_start)) ) + declare_potential_outcomes( Y_Z_0 = unit_shock + 0.5 * time + noise, # common pretreatment trend Y_Z_1 = Y_Z_0 + 0.2) + declare_estimand(ATE = mean(Y_Z_1 - Y_Z_0), subset = time == 1) + declare_assignment(Z = 1*(unit_treated &amp; pretreatment == FALSE), handler = fabricate) + declare_reveal(Y, Z) + declare_estimator(Y ~ Z + time, fixed_effects = ~ units + periods, model = lm_robust, label = &quot;twoway-fe&quot;, estimand = &quot;ATE&quot;) # diagnose_design(multi_period_design, diagnosands = declare_diagnosands(select = bias), sims = 500, bootstrap_sims = 1000) Show that in case where some units switch back and forth between T and C during panel there is bias (point to Imai and Kim appear with weighted FE estimator to fix this) "],
["regression-discontinuity.html", "14.4 Regression Discontinuity", " 14.4 Regression Discontinuity Regression discontinuity designs exploit substantive knowledge that treatment is assigned in a particular way: everyone above a threshold is assigned to treatment and everyone below it is not. Even though researchers do not control the assignment, substantive knowledge about the threshold serves as a basis for a strong identification claim. Thistlewhite and Campbell introduced the regression discontinuity design in the 1960s to study the impact of scholarships on academic success. Their insight was that students with a test score just above a scholarship cutoff were plausibly comparable to students whose scores were just below the cutoff, so any differences in future academic success could be attributed to the scholarship itself. Regression discontinuity designs identify a local average treatment effect: the average effect of treatment exactly at the cutoff. The main trouble with the design is that there is vanishingly little data exactly at the cutoff, so any answer strategy needs to use data that is some distance away from the cutoff. The further away from the cutoff we move, the larger the threat of bias. We’ll consider an application of the regression discontinuity design that examines party incumbency advantage – the effect of a party winning an election on its vote margin in the next election. 14.4.1 Design Declaration Model: Regression discontinuity designs have four components: A running variable, a cutoff, a treatment variable, and an outcome. The cutoff determines which units are treated depending on the value of the running variable. In our example, the running variable \\(X\\) is the Democratic party’s margin of victory at time \\(t-1\\); and the treatment, \\(Z\\), is whether the Democratic party won the election in time \\(t-1\\). The outcome, \\(Y\\), is the Democratic vote margin at time \\(t\\). We’ll consider a population of 1,000 of these pairs of elections. A major assumption required for regression discontinuity is that the conditional expectation functions for both treatment and control potential outcomes are continuous at the cutoff.13 To satisfy this assumption, we specify two smooth conditional expectation functions, one for each potential outcome. The figure plots \\(Y\\) (the Democratic vote margin at time \\(t\\)) against \\(X\\) (the margin at time \\(t-1\\)). We’ve also plotted the true conditional expectation functions for the treated and control potential outcomes. The solid lines correspond to the observed data and the dashed lines correspond to the unobserved data. cutoff &lt;- .5 control &lt;- function(X) { as.vector(poly(X, 4, raw = TRUE) %*% c(.7, -.8, .5, 1))} treatment &lt;- function(X) { as.vector(poly(X, 4, raw = TRUE) %*% c(0, -1.5, .5, .8)) + .15} rd_design &lt;- # Model ------------------------------------------------------------------- declare_population( N = 1000, X = runif(N, 0, 1) - cutoff, noise = rnorm(N, 0, .1), Z = 1 * (X &gt; 0) ) + declare_potential_outcomes(Y ~ Z * treatment(X) + (1 - Z) * control(X) + noise) + # Inquiry ----------------------------------------------------------------- declare_estimand(LATE = treatment(0) - control(0)) + # Data Strategy ----------------------------------------------------------------- declare_reveal(Y, Z) + # Answer Strategy --------------------------------------------------------- declare_estimator(formula = Y ~ poly(X, 4) * Z, model = lm_robust, estimand = &quot;LATE&quot;) Inquiry: Our estimand is the effect of a Democratic win in an election on the Democratic vote margin of the next election, when the Democratic vote margin of the first election is zero. Formally, it is the difference in the conditional expectation functions of the control and treatment potential outcomes when the running variable is exactly zero. The black vertical line in the plot shows this difference. Data strategy: We collect data on the Democratic vote share at time \\(t-1\\) and time \\(t\\) for all 1,000 pairs of elections. There is no sampling or random assignment. Answer strategy: We will approximate the treated and untreated conditional expectation functions to the left and right of the cutoff using a flexible regression specification estimated via OLS. In particular, we fit each regression using a fourth-order polynomial. Much of the literature on regression discontinuity designs focuses on the tradeoffs among answer strategies, with many analysts recommending against higher-order polynomial regression specifications. We use one here to highlight how well such an answer strategy does when it matches the functional form in the model. We discuss alternative estimators in the exercises. rd_diagnosis &lt;- diagnose_design(rd_design, sims = sims, bootstrap_sims = b_sims) Now all that simulating, saving, and loading is done, and we can use the simulations for whatever you want. summary(rd_diagnosis) ## ## Research design diagnosis based on 100 simulations. Diagnosand estimates with bootstrapped standard errors in parentheses (20 replicates). ## ## Design Label Estimand Label Estimator Label Term N Sims Bias ## rd_design LATE estimator poly(X, 4)1 100 2.08 ## (2.36) ## RMSE Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate ## 24.82 0.06 0.95 2.23 24.85 26.52 0.33 ## (1.50) (0.02) (0.02) (2.36) (1.54) (0.28) (0.21) ## Mean Estimand ## 0.15 ## (0.00) 14.4.2 Takeaways We highlight three takeaways. First, the power of this design is very low: with 1,000 units we do not achieve even 10% statistical power. However, our estimates of the uncertainty are not too wide: the coverage probability indicates that our confidence intervals indeed contain the estimand 95% of the time as they should. Our answer strategy is highly uncertain because the fourth-order polynomial specification in regression model gives weights to the data that greatly increase the variance of the estimator (Gelman and Imbens (2017)). In the exercises we explore alternative answer strategies that perform better. Second, the design is biased because polynomial approximations of the average effect at exactly the point of the threshold will be inaccurate in small samples (Sekhon and Titiunik (2017)), especially as units farther away from the cutoff are incorporated into the answer strategy. We know that the estimated bias is not due to simulation error by examining the bootstrapped standard error of the bias estimates. Finally, from the figure, we can see how poorly the average effect at the threshold approximates the average effect for all units. The average treatment effect among the treated (to the right of the threshold in the figure) is negative, whereas at the threshold it is positive. This clarifies that the estimand of the regression discontinuity design, the difference at the cutoff, is only relevant for a small – and possibly empty – set of units very close to the cutoff. 14.4.3 Further Reading Since its rediscovery by social scientists in the late 1990s, the regression discontinuity design has been widely used to study diverse causal effects such as: prison on recidivism (Mitchell et al. (2017)); China’s one child policy on human capital (Qin, Zhuang, and Yang (2017)); eligibility for World Bank loans on political liberalization (Carnegie and Samii (2017)); and anti-discrimination laws on minority employment (Hahn, Todd, and Van der Klaauw (1999)). We’ve discussed a “sharp” regression discontinuity design in which all units above the threshold were treated and all units below were untreated. In fuzzy regression discontinuity designs, some units above the cutoff remain untreated or some units below take treatment. This setting is analogous to experiments that experience noncompliance and may require instrumental variables approaches to the answer strategy (see Compliance is a Potential Outcome). Geographic regression discontinuity designs use distance to a border as the running variable: units on one side of the border are treated and units on the other are untreated. Keele and Titiunik (2016) use such a design to study whether voters are more likely to turn out when they have the opportunity to vote directly on legislation on so-called ballot initiatives. A complication of this design is how to measure distance to the border in two dimensions. 14.4.4 Exercises Gelman and Imbens (2017) point out that higher order polynomial regression specifications lead to extreme regression weights. One approach to obtaining better estimates is to select a bandwidth, \\(h\\), around the cutoff, and run a linear regression. Declare a sampling procedure that subsets the data to a bandwidth around the threshold, as well as a first order linear regression specification, and analyze how the power, bias, RMSE, and coverage of the design vary as a function of the bandwidth. The rdrobust estimator in the rdrobust package implements a local polynomial estimator that automatically selects a bandwidth for the RD analysis and bias-corrected confidence intervals. Declare another estimator using the rdrobust function and add it to the design. How does the coverage and bias of this estimator compare to the regression approaches declared above? Reduce the number of polynomial terms of the the treatment() and control() functions and assess how the bias of the design changes as the potential outcomes become increasingly linear as a function of the running variable. Redefine the population function so that units with higher potential outcome are more likely to locate just above the cutoff than below it. Assess whether and how this affects the bias of the design. References "],
["process-tracing.html", "14.5 Process tracing", " 14.5 Process tracing "],
["synthetic-controls.html", "14.6 Synthetic controls", " 14.6 Synthetic controls Modeled after the example here: https://www.mitpressjournals.org/doi/abs/10.1162/REST_a_00429?casa_token=o-zWqCima50AAAAA:yiEERZfdhAUoHV0-xBYNjgdljvgfRXrriR8foG7X8nHSUAMFrLcw2vWY8e9pHzmRT24MMAIv9hvKpQ Did the 2007 Legal Arizona Workers Act Reduce the State’s Unauthorized Immigrant Population? Sarah Bohn, Magnus Lofstrom, and Steven Raphael The Review of Economics and Statistics 2014 96:2, 258-269 Abstract: We test for an effect of Arizona’s 2007 Legal Arizona Workers Act (LAWA) on the proportion of the state’s population characterized as noncitizen Hispanic. We use the synthetic control method to select a group of states against which Arizona’s population trends can be compared. We document a notable and statistically significant reduction in the proportion of the Hispanic noncitizen population in Arizona. The decline observed matches the timing of LAWA’s implementation, deviates from the time series for the synthetic control group, and stands out relative to the distribution of placebo estimates for other states in the nation. Outline: (1) how does synth work? - declaration: set up states with time trends and levels that are both correlated with a type and following the linear model assumed by SCM - try three estimators: (1) difference-in-difference; (2) single difference in treated period; and (3) difference in treated period weighted by Synth weights. - show that synth works under its assumptions; plot of time series of treat and synthetic control; plot of the time series from all units to illustrate which are picked (sorted by weights) (2) what are synth’s assumptions? - linear model; treated unit is in convex hull of control units’ pretreatment time series (3) how to diagnose when you are outside the convex hull - declaration outside the convex hull and use the Abadie diagnostic demonstrating a poor match. (possibly explore power of this diagnostic) - show that synth is biased in this setting. augsynth is not. # tidy function that takes data and just adds the synthetic control weights to it synth_weights_tidy &lt;- function(data) { dataprep.out &lt;- dataprep( foo = data, predictors = &quot;prop_non_hispanic_below_hs&quot;, predictors.op = &quot;mean&quot;, time.predictors.prior = 1998:2006, dependent = &quot;prop_non_hispanic_below_hs&quot;, unit.variable = &quot;state_number&quot;, time.variable = &quot;year&quot;, treatment.identifier = 4, controls.identifier = c(1:3, 5:50), # states without Arizona time.optimize.ssr = 1998:2006, time.plot = 1998:2009) capture.output(fit &lt;- synth(data.prep.obj = dataprep.out)) tab &lt;- synth.tab(dataprep.res = dataprep.out, synth.res = fit) data %&gt;% left_join(tab$tab.w %&gt;% mutate(synth_weights = w.weights) %&gt;% dplyr::select(synth_weights, unit.numbers), by = c(&quot;state_number&quot; = &quot;unit.numbers&quot;)) %&gt;% mutate(synth_weights = replace(synth_weights, state_number == 4, 1)) } augsynth_tidy &lt;- function(data) { fit &lt;- augsynth(prop_non_hispanic_below_hs ~ legal_worker_act, state, year, t_int = 2007, data = data) res &lt;- summary(fit)$att %&gt;% filter(Time == 2007) %&gt;% select(Estimate, Std.Error) names(res) &lt;- c(&quot;estimate&quot;, &quot;std.error&quot;) res$p.value &lt;- 2 * pt(-abs(res$estimate/res$std.error), df = nrow(data) - 15) res$conf.low &lt;- res$estimate - 1.96 * res$std.error res$conf.high &lt;- res$estimate + 1.96 * res$std.error res } # note need to clean up the range of the data, currently over 1 design &lt;- declare_population( states = add_level( N = 50, state = state.abb, state_number = as.numeric(as.factor(state)), state_shock = runif(N, -.15, .15), border_state = state %in% c(&quot;AZ&quot;, &quot;CA&quot;, &quot;NM&quot;, &quot;TX&quot;), state_shock = ifelse(border_state, .2, state_shock) ), years = add_level( N = 12, nest = FALSE, year = 1998:2009, post_treatment_period = year &gt;= 2007, year_shock = runif(N, -.025, .025), year_trend = year - 1998 ), obs = cross_levels( by = join(states, years), # treatment indicator: legal_worker_act = if_else(post_treatment_period == TRUE &amp; state == &quot;AZ&quot;, 1, 0), state_year_shock = runif(N, -.025, .025), prop_non_hispanic_below_hs_baseline = 0.4 + state_shock + year_shock + (.01 + .05 * border_state) * year_trend + state_year_shock ) ) + declare_potential_outcomes( prop_non_hispanic_below_hs ~ prop_non_hispanic_below_hs_baseline + 0.25 * legal_worker_act, assignment_variable = legal_worker_act) + declare_estimand( ATE_AZ = mean(prop_non_hispanic_below_hs_legal_worker_act_1 - prop_non_hispanic_below_hs_legal_worker_act_0), subset = legal_worker_act == TRUE) + declare_reveal(prop_non_hispanic_below_hs, legal_worker_act) + declare_step(handler = synth_weights_tidy) + declare_estimator( prop_non_hispanic_below_hs ~ legal_worker_act, subset = year &gt;= 2007, weights = synth_weights, model = lm_robust, label = &quot;synth&quot;) + declare_estimator( prop_non_hispanic_below_hs ~ legal_worker_act, subset = year &gt;= 2007, model = lm_robust, label = &quot;unweighted&quot;) + declare_estimator( prop_non_hispanic_below_hs ~ I(state == &quot;AZ&quot;) + post_treatment_period + legal_worker_act, term = &quot;legal_worker_act&quot;, model = lm_robust, label = &quot;unweighted_did&quot;) + declare_estimator(handler = tidy_estimator(augsynth_tidy), label = &quot;augsynth&quot;) state_data &lt;- draw_data(design) state_data %&gt;% dplyr::select(state, synth_weights) %&gt;% distinct %&gt;% arrange(-synth_weights) %&gt;% head ## state synth_weights ## 1 AZ 1.000 ## 2 TX 0.942 ## 3 NM 0.026 ## 4 CA 0.016 ## 5 AL 0.001 ## 6 AK 0.001 state_data %&gt;% ggplot() + geom_line(aes(year, prop_non_hispanic_below_hs)) + facet_wrap(~ state) state_data %&gt;% mutate(treatment_state = factor(state == &quot;AZ&quot;, levels = c(FALSE, TRUE), labels = c(&quot;Synthethic Control&quot;, &quot;Arizona&quot;))) %&gt;% group_by(treatment_state, year) %&gt;% summarize(prop_non_hispanic_below_hs = weighted.mean(prop_non_hispanic_below_hs, w = synth_weights)) %&gt;% ggplot(aes(x = year, y = prop_non_hispanic_below_hs, color = treatment_state)) + geom_line() + geom_vline(xintercept = 2007) + scale_x_continuous(breaks = scales::pretty_breaks()) + annotate(&quot;text&quot;, x = 2006.7, y = 1.7, label = &quot;Law Introduced in 2007&quot;, hjust = &quot;right&quot;, family = &quot;Palatino&quot;) + labs(color = &quot;&quot;) + xlab(&quot;&quot;) + ylab(&quot;Proportion Non-Hispanic Below H.S. Education&quot;) + dd_theme() simulations &lt;- simulate_design(design, sims = sims) Now all that simulating, saving, and loading is done, and we can use the simulations for whatever you want. synth_diagnosands &lt;- declare_diagnosands(select = c(&quot;bias&quot;, &quot;rmse&quot;, &quot;coverage&quot;)) diagnosis &lt;- diagnose_design(simulations, diagnosands = synth_diagnosands, bootstrap_sims = b_sims) kable(reshape_diagnosis(diagnosis)) Design Label Estimand Label Estimator Label Term N Sims Bias RMSE Coverage design ATE_AZ augsynth NA 1000 0.00 0.02 0.66 (0.00) (0.00) (0.01) design ATE_AZ synth legal_worker_act 1000 0.01 0.02 1.00 (0.00) (0.00) (0.00) design ATE_AZ unweighted legal_worker_act 1000 0.66 0.66 0.00 (0.00) (0.00) (0.00) design ATE_AZ unweighted_did legal_worker_act 1000 0.28 0.28 0.00 (0.00) (0.00) (0.00) we see that Synth outperforms either method 14.6.1 When there are not good controls, standard synth will get the wrong answer # declaration outside the convex hull design_outside_hull &lt;- replace_step( design, step = 2, new_step = declare_potential_outcomes( prop_non_hispanic_below_hs ~ prop_non_hispanic_below_hs_baseline + 0.25 * legal_worker_act + 0.2 * (state == &quot;AZ&quot;), assignment_variable = legal_worker_act)) state_data_outside_hull &lt;- draw_data(design_outside_hull) simulations_outside_hull &lt;- simulate_design(design_outside_hull, sims = sims) Now all that simulating, saving, and loading is done, and we can use the simulations for whatever you want. diagnosis_outside_hull &lt;- diagnose_design(simulations_outside_hull, diagnosands = synth_diagnosands, bootstrap_sims = b_sims) kable(reshape_diagnosis(diagnosis_outside_hull)) Design Label Estimand Label Estimator Label Term N Sims Bias RMSE Coverage design_outside_hull ATE_AZ augsynth NA 1000 -0.01 0.03 0.75 (0.00) (0.00) (0.01) design_outside_hull ATE_AZ synth legal_worker_act 1000 0.20 0.20 0.00 (0.00) (0.00) (0.00) design_outside_hull ATE_AZ unweighted legal_worker_act 1000 0.86 0.86 0.00 (0.00) (0.00) (0.00) design_outside_hull ATE_AZ unweighted_did legal_worker_act 1000 0.28 0.28 0.00 (0.00) (0.00) (0.00) # plot the synthetic control constructed in this way (it usually picks just texas and is highly biased) state_data_outside_hull %&gt;% mutate(treatment_state = factor(state == &quot;AZ&quot;, levels = c(FALSE, TRUE), labels = c(&quot;Synthethic Control&quot;, &quot;Arizona&quot;))) %&gt;% group_by(treatment_state, year) %&gt;% summarize(prop_non_hispanic_below_hs = weighted.mean(prop_non_hispanic_below_hs, w = synth_weights)) %&gt;% ggplot(aes(x = year, y = prop_non_hispanic_below_hs, color = treatment_state)) + geom_line() + geom_vline(xintercept = 2007) + scale_x_continuous(breaks = scales::pretty_breaks()) + annotate(&quot;text&quot;, x = 2006.7, y = 1.7, label = &quot;Law Introduced in 2007&quot;, hjust = &quot;right&quot;, family = &quot;Palatino&quot;) + labs(color = &quot;&quot;) + xlab(&quot;&quot;) + ylab(&quot;Proportion Non-Hispanic Below H.S. Education&quot;) + dd_theme() 14.6.2 References "],
["experimental-designs-for-causal-inference.html", "Chapter 15 Experimental designs for causal inference", " Chapter 15 Experimental designs for causal inference Section introduction "],
["two-arm-trials.html", "15.1 Two arm trials", " 15.1 Two arm trials You can use the global bib file via rmarkdown cites like this: Imai, King, and Stuart (2008) design &lt;- declare_population(N = 100, u = rnorm(N)) + declare_potential_outcomes(Y ~ Z + u) + declare_assignment(prob = 0.5) + declare_reveal(Y, Z) + declare_estimator(Y ~ Z, model = difference_in_means) This chunk is set to echo = TRUE and eval = do_diagnosis simulations_pilot &lt;- simulate_design(design, sims = sims) Right after you do simulations, you want to save the simulations rds. Now all that simulating, saving, and loading is done, and we can use the simulations for whatever you want. kable(head(simulations_pilot)) design_label sim_ID estimator_label term estimate std.error statistic p.value conf.low conf.high df outcome design 1 estimator Z 0.9624445 0.1705951 5.641688 0.0000002 0.6234399 1.301449 88.32465 Y design 2 estimator Z 0.9532166 0.2124610 4.486548 0.0000200 0.5315217 1.374911 96.66334 Y design 3 estimator Z 0.9674071 0.2137695 4.525468 0.0000170 0.5431863 1.391628 97.96114 Y design 4 estimator Z 1.0545908 0.1942247 5.429747 0.0000004 0.6690878 1.440094 96.58766 Y design 5 estimator Z 1.0708566 0.1897958 5.642153 0.0000002 0.6942127 1.447501 97.99051 Y design 6 estimator Z 0.7197320 0.1964379 3.663916 0.0004076 0.3297870 1.109677 95.63827 Y References "],
["two-arm-trials-and-designs-with-blocking-and-clustering.html", "15.2 Two-arm trials and designs with blocking and clustering", " 15.2 Two-arm trials and designs with blocking and clustering "],
["multiarm-designs.html", "15.3 Multiarm Designs", " 15.3 Multiarm Designs You can use the global bib file via rmarkdown cites like this: Imai, King, and Stuart (2008) design &lt;- declare_population(N = 100, u = rnorm(N)) + declare_potential_outcomes(Y ~ Z + u) + declare_assignment(prob = 0.5) + declare_reveal(Y, Z) + declare_estimator(Y ~ Z, model = difference_in_means) This chunk is set to echo = TRUE and eval = do_diagnosis simulations_pilot &lt;- simulate_design(design, sims = sims) Right after you do simulations, you want to save the simulations rds. Now all that simulating, saving, and loading is done, and we can use the simulations for whatever you want. kable(head(simulations_pilot)) design_label sim_ID estimator_label term estimate std.error statistic p.value conf.low conf.high df outcome design 1 estimator Z 0.9624445 0.1705951 5.641688 0.0000002 0.6234399 1.301449 88.32465 Y design 2 estimator Z 0.9532166 0.2124610 4.486548 0.0000200 0.5315217 1.374911 96.66334 Y design 3 estimator Z 0.9674071 0.2137695 4.525468 0.0000170 0.5431863 1.391628 97.96114 Y design 4 estimator Z 1.0545908 0.1942247 5.429747 0.0000004 0.6690878 1.440094 96.58766 Y design 5 estimator Z 1.0708566 0.1897958 5.642153 0.0000002 0.6942127 1.447501 97.99051 Y design 6 estimator Z 0.7197320 0.1964379 3.663916 0.0004076 0.3297870 1.109677 95.63827 Y References "],
["encouragement-designs.html", "15.4 Encouragement designs", " 15.4 Encouragement designs Idea for this one would be to show how violations of no defiers and excludability lead to bias. types &lt;- c(&quot;Always-Taker&quot;, &quot;Never-Taker&quot;, &quot;Complier&quot;, &quot;Defier&quot;) direct_effect_of_encouragement &lt;- 0.0 proportion_defiers &lt;- 0.0 design &lt;- declare_population( N = 500, type = sample( types, N, replace = TRUE, prob = c(0.1, 0.1, 0.8 - proportion_defiers, proportion_defiers) ), noise = rnorm(N) ) + declare_potential_outcomes( D ~ case_when( Z == 0 &amp; type %in% c(&quot;Never-Taker&quot;, &quot;Complier&quot;) ~ 0, Z == 1 &amp; type %in% c(&quot;Never-Taker&quot;, &quot;Defier&quot;) ~ 0, Z == 0 &amp; type %in% c(&quot;Always-Taker&quot;, &quot;Defier&quot;) ~ 1, Z == 1 &amp; type %in% c(&quot;Always-Taker&quot;, &quot;Complier&quot;) ~ 1 ) ) + declare_potential_outcomes( Y ~ 0.5 * (type == &quot;Complier&quot;) * D + 0.25 * (type == &quot;Always-Taker&quot;) * D + 0.75 * (type == &quot;Defier&quot;) * D + direct_effect_of_encouragement * Z + noise, assignment_variables = c(&quot;D&quot;, &quot;Z&quot;) ) + declare_estimand(CACE = mean((Y_D_1_Z_1 + Y_D_1_Z_0) / 2 - (Y_D_0_Z_1 + Y_D_0_Z_0) / 2), subset = type == &quot;Complier&quot;) + declare_assignment(prob = 0.5) + declare_reveal(D, assignment_variable = &quot;Z&quot;) + declare_reveal(Y, assignment_variables = c(&quot;D&quot;, &quot;Z&quot;)) + declare_estimator(Y ~ D | Z, model = iv_robust, estimand = &quot;CACE&quot;) designs &lt;- redesign( design, proportion_defiers = seq(0, 0.3, length.out = 5), direct_effect_of_encouragement = seq(0, 0.3, length.out = 5) ) simulations &lt;- simulate_design(designs, sims = sims) gg_df &lt;- simulations %&gt;% group_by(proportion_defiers, direct_effect_of_encouragement) %&gt;% summarize(bias = mean(estimate - estimand)) ggplot(gg_df, aes( proportion_defiers, bias, group = direct_effect_of_encouragement, color = direct_effect_of_encouragement )) + geom_point() + geom_line() 15.4.1 References "],
["stepped-wedge-designs.html", "15.5 Stepped wedge designs", " 15.5 Stepped wedge designs Plan with this vignette: Show why you would want to do stepped wedge Increases power There are more estimands Show conditions under which FE give you wrong answer, draw connection to two-way FE papers in econ Show how to get answer right under hetfx Show additional tradeoffs in sample allocation 15.5.1 Design Declaration Model: Inquiry: Data strategy: Answer strategy: The weights consider p_00 &lt;- p_W1 &lt;- p_W2 &lt;- p_W3 &lt;- 1/4 design &lt;- declare_population( t = add_level(N = 3, u_t = rnorm(N), trend = as.numeric(t), p = c(p_W1, p_W1 + p_W2, p_W1 + p_W2 + p_W3)), i = add_level(N = 8, u_i = rnorm(N), nest = FALSE), obs = cross_levels(by = join(t, i), u_ti = rnorm(N))) + declare_potential_outcomes( Y_Z_0 = u_i + u_t + u_ti, Y_Z_1 = u_i + u_t + u_ti + trend) + declare_assignment(clusters = i, conditions = 1:4, prob_each = c(p_W1, p_W2, p_W3, p_00), assignment_variable = &quot;wave&quot;) + declare_step(Z = as.numeric(t &gt;= wave), ip = 1 / (Z * p + (1 - Z) * (1 - p)), handler = fabricate) + declare_reveal(Y, Z) + declare_estimand(ate = mean(Y_Z_1 - Y_Z_0)) + declare_estimator(Y ~ Z, model = lm_robust, label = &quot;Unweighted SW&quot;) + declare_estimator(Y ~ Z, model = lm_robust, label = &quot;Weighted SW&quot;, weights = ip) draw_data(design) %&gt;% mutate(i = fct_reorder(i, wave), Assignment = ifelse(Z == 1, &quot;Treatment&quot;, &quot;Control&quot;)) %&gt;% ggplot(aes(x = t, y = i, fill = Assignment)) + geom_tile(color = &quot;white&quot;) + scale_fill_grey(start = .9,end = .5) + geom_text(aes(label = round(ip,1))) + dd_theme() # Diagnose design diagnoses &lt;- diagnose_design(design) reshape_diagnosis(diagnoses) %&gt;% kable() Design Label Estimand Label Estimator Label Term N Sims Bias RMSE Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate Mean Estimand design ate Unweighted SW Z 500 0.31 0.84 0.87 0.91 2.31 0.78 0.69 0.00 2.00 (0.04) (0.03) (0.02) (0.01) (0.04) (0.02) (0.01) (0.00) (0.00) design ate Weighted SW Z 500 -0.04 0.74 0.69 0.96 1.96 0.74 0.77 0.00 2.00 (0.04) (0.02) (0.02) (0.01) (0.04) (0.02) (0.01) (0.00) (0.00) Change assignment allocation # Diagnose design no_SW &lt;- redesign(design, p_00 = .5, p_W1 = .5, p_W2 = 0, p_W3 = 0) no_control &lt;- redesign(design, p_00 = 0, p_W1 = .34, p_W2 = .33, p_W3 = .33) more_earlier &lt;- redesign(design, p_00 = .5, p_W1 = .30, p_W2 = .10, p_W3 = .10) sw_comparisons &lt;- diagnose_designs(no_SW, no_control, more_earlier) reshape_diagnosis(sw_comparisons) %&gt;% kable() Design Label p_00 p_W1 p_W2 p_W3 Estimand Label Estimator Label Term N Sims Bias RMSE Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate Mean Estimand no_SW 0.5 0.5 0 0 ate Unweighted SW Z 500 -0.06 0.86 0.71 0.88 1.94 0.86 0.68 0.00 2.00 (0.04) (0.03) (0.02) (0.01) (0.04) (0.03) (0.01) (0.00) (0.00) no_SW 0.5 0.5 0 0 ate Weighted SW Z 500 -0.06 0.86 0.71 0.88 1.94 0.86 0.68 0.00 2.00 (0.04) (0.03) (0.02) (0.01) (0.04) (0.03) (0.01) (0.00) (0.00) no_control 0 0.34 0.33 0.33 ate Unweighted SW Z 500 0.37 1.02 0.83 0.83 2.37 0.95 0.70 0.00 2.00 (0.05) (0.03) (0.02) (0.02) (0.05) (0.03) (0.01) (0.00) (0.00) no_control 0 0.34 0.33 0.33 ate Weighted SW Z 500 0.01 0.84 0.71 0.92 2.01 0.84 0.76 0.00 2.00 (0.04) (0.03) (0.02) (0.01) (0.04) (0.03) (0.01) (0.00) (0.00) more_earlier 0.5 0.3 0.1 0.1 ate Unweighted SW Z 500 0.17 0.79 0.80 0.92 2.17 0.77 0.70 0.00 2.00 (0.03) (0.02) (0.02) (0.01) (0.03) (0.02) (0.01) (0.00) (0.00) more_earlier 0.5 0.3 0.1 0.1 ate Weighted SW Z 500 -0.00 0.77 0.74 0.93 2.00 0.77 0.71 0.00 2.00 (0.03) (0.02) (0.02) (0.01) (0.03) (0.02) (0.01) (0.00) (0.00) 15.5.2 References "],
["randomized-saturation-design.html", "15.6 Randomized Saturation Design", " 15.6 Randomized Saturation Design Randomized saturation designs (Baird et al. (2018)) offer researchers a way to estimate the diffusion of intervention effects within some geographic or social network. Most approaches work by first cluster-assigning non-overlapping groups of individuals to treatment saturations, then block-assigning individuals to treatment in the proportions determined by the saturations. Asunka et al. (2019), for example, wanted to know if the presence of election monitors at ballot stations would displace violence and fraud to other ballot stations. They randomized constituencies to low, medium, and high levels of saturation, and then randomized ballot stations to have election monitoring or not in low, medium, or high concentrations, depending on the randomized saturation. In the original study, the authors did not include a zero-saturation condition. Here, we declare a simplified version of their design in which a zero-saturation condition is included. Main points to develop: Randomized saturation is great when you get the model right. Though, show how IPW reduces the power to detect main effect, especially if there’s no spillover. Randomized saturation assumes a model that may be wrong. In particular, spillovers are restricted to containers. But this might not be correct. 15.6.1 Design Declaration Model: Potential outcomes are defined in terms of S—the saturation—and Z—whether or not a ballot station is treated. We model spillovers in two ways. In the first, the amount of spillover that affects a unit is determined by how many other units in its network are treated. In the second, the amount of spillover a unit receives is determined by whether that unit’s geographic neighbor is treated, irrespective of whether they share a network. Inquiry: We want to know the effect of having high and medium levels of saturation versus low saturation in the control: \\(E[Y_i(Z_i = 0, S_i = \\text{high})-Y_i(Z_i = 0, S_i = \\text{low})]\\) and \\(E[Y_i(Z_i = 0, S_i = \\text{medium})-Y_i(Z_i = 0, S_i = \\text{low})]\\). We also want to know the “direct effect”–e.g. what happens to those directly treated if we disregard spillovers. Here it is defined over potential outcomes that the experiment does not reveal, since no one is treated in low-saturation constituencies: \\(E[Y_i(Z_i = 1, S_i = \\text{low})-Y_i(Z_i = 0, S_i = \\text{low})]\\). Data strategy: We assign entire groups of individual ballot stations to one of three saturations: low (0%), medium (50%), and high (75%). We then randomize individuals within groups to treatment or control in the proportions dictated by the saturation. Thus, the saturation is cluster-randomized, whereas treatment is block-randomized. Answer strategy: We weight each individual by the inverse of the probability that they find themselves in the condition they’re in. To estimate spillovers, we run one regression comparing high and one regression comparing medium to low saturation control units. To estimate the direct effect, we run a regression of the outcome on the treatment indicatior on the full sample, controlling for saturation. N_individuals &lt;- 60 N_groups &lt;- 15 G_per_saturation &lt;- c(5,5,5) design &lt;- declare_population(N = N_individuals, X = 1:N, U = rnorm(N), G = ntile(X, N_groups)) + declare_assignment(assignment_variable = &quot;S&quot;, clusters = G, conditions = c(&quot;low&quot;,&quot;med&quot;,&quot;high&quot;), m_each = G_per_saturation) + declare_assignment(prob = 0, blocks = G, assignment_variable = &quot;Z_S_low&quot;) + declare_assignment(prob = .5, blocks = G, assignment_variable = &quot;Z_S_med&quot;) + declare_assignment(prob = .75, blocks = G, assignment_variable = &quot;Z_S_high&quot;) + declare_step( spillover_low = ave(Z_S_low, G, FUN = sum) * .1, spillover_med = ave(Z_S_med, G, FUN = sum) * .1, spillover_high = ave(Z_S_high, G, FUN = sum) * .1, handler = fabricate, label = &quot;spillover&quot;) + declare_potential_outcomes( Y ~ Z * -.20 + U + spillover_low * (S == &quot;low&quot;) + spillover_med * (S == &quot;med&quot;) + spillover_high * (S == &quot;high&quot;), conditions = list(Z = c(0,1), S = c(&quot;low&quot;,&quot;med&quot;,&quot;high&quot;))) + declare_estimand(high = mean(Y_Z_0_S_high - Y_Z_0_S_low), med = mean(Y_Z_0_S_med - Y_Z_0_S_low), ate_no_spill = mean(Y_Z_1_S_low - Y_Z_0_S_low)) + declare_reveal(Z,S) + declare_step( w = 1 / (S_cond_prob * (Z_S_low_cond_prob * (S == &quot;low&quot;) + Z_S_med_cond_prob * (S == &quot;med&quot;) + Z_S_high_cond_prob * (S == &quot;high&quot;))), handler = fabricate) + declare_reveal(Y,c(Z, S)) + declare_estimator(model = lm_robust, formula = Y ~ S, subset = Z == 0 &amp; S %in% c(&quot;high&quot;,&quot;low&quot;), estimand = &quot;high&quot;, weights = w, label = &quot;high vs low&quot;) + declare_estimator(model = lm_robust, formula = Y ~ S, subset = Z == 0 &amp; S %in% c(&quot;med&quot;,&quot;low&quot;), weights = w, estimand = &quot;med&quot;, label = &quot;med vs low&quot;) + declare_estimator(model = lm_robust, formula = Y ~ Z + S, term = &quot;Z&quot;, weights = w, estimand = &quot;ate_no_spill&quot;, label = &quot;main effect&quot;) Here’s what our hypothetical country looks like: draw_data(design) %&gt;% ggplot(aes(x = 1, y = X, color = as.factor(G))) + geom_point() + scale_color_discrete(&quot;Ballot station&quot;) + scale_y_continuous(&quot;Latitude&quot;) + scale_x_continuous(&quot;Longitude&quot;) + geom_hline(yintercept = seq(1,N_individuals,by = N_individuals / N_groups) - .5) Let’s diagnose diagnosis &lt;- diagnose_design(design, sims = sims) Our diagnosis shows this design does a pretty great job, under this model of spillovers: diagnosis %&gt;% reshape_diagnosis() %&gt;% kable() Design Label Estimand Label Estimator Label Term N Sims Bias RMSE Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate Mean Estimand design ate_no_spill main effect Z 500 0.01 0.35 0.10 0.93 -0.19 0.35 0.33 0.08 -0.20 (0.01) (0.01) (0.01) (0.01) (0.01) (0.01) (0.00) (0.04) (0.00) design high high vs low Shigh 500 -0.05 0.51 0.12 0.90 0.25 0.50 0.48 0.13 0.30 (0.02) (0.02) (0.02) (0.01) (0.02) (0.02) (0.01) (0.05) (0.00) design med med vs low Smed 500 0.00 0.39 0.09 0.93 0.20 0.39 0.38 0.04 0.20 (0.02) (0.01) (0.01) (0.01) (0.02) (0.01) (0.00) (0.03) (0.00) It’s particularly nice, since we’re able to estimate the direct effect (whose constitutive POs we never observe) by partialling out spillovers. Show here: power tradeoffs for main effects versus spillovers, in terms of proportion of sample allocated to the “low” versus other conditions and also in terms of IPW (equivalent sample size with everyone in the .5 condition) Now, we consider a model of spillovers in which fraud is displaced latitudinally, from one neighbor to the next. Say, because there are roads traveling north and fraudsters disregard boundaries (in reality, they are unlikely to do so). distal_design &lt;- replace_step(design = design, step = &quot;spillover&quot;, new_step = declare_step(next_neighbor = c(N,1:(N-1)), spillover_low = Z_S_low[next_neighbor], spillover_med = Z_S_med[next_neighbor], spillover_high = Z_S_high[next_neighbor], handler = fabricate) ) distal_diagnosis &lt;- diagnose_design(distal_design, sims = sims) When there are next-neighbor spillovers that ignore boundaries, the estimator is biased again distal_diagnosis %&gt;% reshape_diagnosis() %&gt;% kable() Design Label Estimand Label Estimator Label Term N Sims Bias RMSE Power Coverage Mean Estimate SD Estimate Mean Se Type S Rate Mean Estimand distal_design ate_no_spill main effect Z 500 -0.25 0.43 0.23 0.88 -0.45 0.36 0.36 0.00 -0.20 (0.02) (0.01) (0.02) (0.01) (0.02) (0.01) (0.00) (0.00) (0.00) distal_design high high vs low Shigh 500 0.20 0.54 0.48 0.91 0.95 0.50 0.48 0.00 0.75 (0.02) (0.02) (0.02) (0.01) (0.02) (0.02) (0.01) (0.00) (0.00) distal_design med med vs low Smed 500 0.15 0.42 0.33 0.92 0.65 0.40 0.41 0.00 0.50 (0.02) (0.01) (0.02) (0.01) (0.02) (0.01) (0.00) (0.00) (0.00) References "],
["multi-study-designs.html", "Chapter 16 Multi-study designs", " Chapter 16 Multi-study designs section introduction "],
["papers-with-multiple-studies.html", "16.1 Papers with multiple studies", " 16.1 Papers with multiple studies In many research projects, we seek to evaluate multiple observable implications for a single theory. [Examples: Psychology; APSR articles that have an experiment plus observational work; replication efforts.] In such cases, a single piece of evidence does not constitute sufficient evidence to validate the theory as a whole. Rather, we believe in the theory when multiple pieces of evidence support it. Conventions around what constitutes a convincing pattern of evidence vary. Some researchers will not believe a theory unless each piece of evidence in support of it is statistically significant. Less stringent approaches simply seek evidence “consistent” with the theory, such as the observation that all effects are signed in the predicted direction. Here, we declare an \\(N\\)-study design, and examine the consequences of these two different approaches to evaluating a theory in light of multiple studies. We show that, under multiple observable implications generated by the same process, conditioning on significance can lead one strongly astray. Generally speaking, looking at the sign of effects is more probative because it is much less prone to false negatives. With small numbers of studies, however, the risks of false positives are high. 16.1.1 Design Declaration Model: We declare \\(N\\) populations, all of which are governed by the same data-generating process: X is exogenous and standard normally-distributed, M is standard-normally distributed and correlated with X by rho, and Y is a function of the main effect of X as well as the interaction between X and M, with the size and sign of the direct and interactive effects determined by tau and gamma, respectively. Inquiry: We want to know, in a global sense, if our theory is “right.” Here, that means that the effect of X on Y is positive and increasing with M, and that X affects M. When tau is positive, our theory is correct. When it is zero or negative, our theory is incorrect. Data strategy: We conduct and collect independent datasets on \\(N\\) datasets of size n. In the example below, we conduct three studies, assuming we only observe X and Y in the first, only M and X in the second, and Y, M, and X, in the third. Answer strategy: Using linear regression, we estimate the bivariate correlation between X and Y in study 1, the bivariate correlation between X and M in study 2, and the interaction between X and M on Y in study 3. n1 &lt;- 100 n2 &lt;- 100 n3 &lt;- 100 rho &lt;- .5 gamma &lt;- tau &lt;- .2 generate_study_sample &lt;- function(n, rho, tau, gamma, data){ fabricate(N = n, X = rnorm(N), M = rnorm(N, X * rho, sqrt(1 - rho^2)), U = rnorm(N), Y = tau * X + gamma * M * X + U) } three_study_design &lt;- # Study 1 -- Bivariate correlation between X and Y declare_population(n = n1, tau = tau, gamma = gamma, rho = rho, handler = generate_study_sample) + declare_estimator(Y ~ X, term = &quot;X&quot;, model = lm_robust, label = &quot;Study 1&quot;) + # Study 2 -- Bivariate correlation between M and X declare_population(n = n2, tau = tau, gamma = gamma, rho = rho, handler = generate_study_sample) + declare_estimator(M ~ X, term = &quot;X&quot;, model = lm_robust, label = &quot;Study 2&quot;) + # Study 3 -- Interaction in X and M declare_population(n = n3, tau = tau, gamma = gamma, rho = rho, handler = generate_study_sample) + declare_estimator(Y ~ X + M + X:M, term = &quot;X:M&quot;, model = lm_robust, label = &quot;Study 3&quot;) 16.1.2 Takeaways Let us compare the performance of the “all significant” versus “all signed” approaches to theory confirmation when the theory is “correct” (tau and gamma positive), versus when it is “incorrect” (both parameters zero). In the first approach, a theory is deemed “supported” by the evidence when all effects are significant. In the second, the theory is supported by the evidence when the signs of all effects are positive. # Simulate design simulations &lt;- simulate_design(three_study_design) # Simulate null design null_three_study_design &lt;- redesign(three_study_design, tau = 0, gamma = 0, rho = 0) null_simulations &lt;- simulate_design(null_three_study_design) In the first three rows of the table, the theory is correct in that tau, gamma, and rho are positive, in the second three rows it is incorrect because both the main effect and interaction are zero. The “power” column tells us the proportion of simulations in which the effect is significant at the \\(\\alpha = .05\\) level, the “all significant” column tells us the proportion of simulations in which all of the studies have significant effects, the “positive” column tells us how often the study found a positively signed result, while the “all positive column” tells us the proportion of simulations where all studies had a positively signed result. tau estimator_label gamma power all_significant positive all_positive 0.2 Study 1 0.2 0.406 0.256 0.968 0.938 0.2 Study 2 0.2 0.998 0.256 1.000 0.938 0.2 Study 3 0.2 0.616 0.256 0.966 0.938 0.0 Study 1 0.0 0.058 0.000 0.500 0.114 0.0 Study 2 0.0 0.052 0.000 0.506 0.114 0.0 Study 3 0.0 0.060 0.000 0.530 0.114 Notice that, because the studies are independent, the probability that all are significant is equal to the product of their power: Pr(all studies significant) = Pr(Study 1 significant) \\(\\times\\)…\\(\\times\\) Pr(Study \\(N\\) significant). Thus, if you only believe a theory if the studies conducted to test it yield significant results, and those studies are all powered at the conventionally accepted level of 80%, you erroneously reject the theory with a probability of \\(.8^N\\). If you do three, conventionally well-powered, randomized studies each shooting at the right quantity of interest, then in almost half of the cases where you are right, you will think you are wrong. Furthermore, notice how detrimental the addition of a small study can be by this metric, even if it gets at an important mechanism. As soon as you condition your inference about the theory being correct on the significance of all the observable implications, a low-powered test can sharply increase the risk of false rejection. What can we say about the risk of false positives? The power of the individual studies is where it should be: for a stated error rate of $= $5%, the studies are every so slightly conservative. However, the “all significant” desideratum creates a rejection rate that is too high. Some of these problems, though not all, are alleviated when we disregard significance and just look at signs. When the theory is right, there is a very good chance that all of the effects we estimate are positive: we surmise the theory is correct roughly 94% of the time when it actually is. When the theory is not correct in the sense that the true effects are zero, random error means that they are positive half the time and negative the other half. Consequently, the probability of erroneously accepting the theory based on the sign of effects when the true underlying effects are zero is equal to \\(.5^N\\). Here, that means we erroneously infer we are right at a relatively high rate of 12% of simulations. In the design above, the rates at which we rejected or accepted theories seemed to depend on the number of studies we considered. In the graph below, we look at twenty-nine different \\(N\\)-study designs, all of which seek to confirm a theory by replicating evidence for it \\(N\\) times. The first design is made of two studies, each independtly evaluating the hypothesis that \\(Y\\) is positively correlated with \\(X\\). Again, we consider how conditioning an inference about the theory on whether all results are significant or all results are positive affects error rates. Again, we see that significance is not a probative way to look for observable theoretical implications. As soon as there are more than four studies, there is virtually no chance of confirming even a true theory by this metric. We see a sort of reverse multiple-comparisons problem: increasing the number of tests makes false rejections increasingly more likely when we are interested in the joint probability of all the tests saying the same thing. Unless the number of studies is small, whether all produce significant results essentially yields no information about whether the theory is correct. By contrast, looking at signs only can be highly probative. In this application, the optimal number of studies is about eight. At that point, there is virtually no chance of erroneously inferring that the theory is correct when the effects are zero, but when the theory is correct there is a good chance (almost 75%) that all of the available evidence will be signed accordingly. As the number of studies increases, so too does the probability of discordant results, and using the unanimity of signs to judge whether the theory is correct becomes increasingly unwise. "],
["multi-site-studies.html", "16.2 Multi-site studies", " 16.2 Multi-site studies 16.2.1 Unbiased estimates of out-of-sample sites in presence of heterogeneous effects starting point is fixed budget and you’re thinking about two possible designs: (1) a single large study in one context or (2) a set of five studies in five different contexts with the same intervention and outcome measures When there are heterogeneous effects, you can get good predictions out of sample even when average effects differ substantially (and you do better with multiple sites when sites in the the population have different proportions of subject types that are correlated with het fx) Two notable features of the design: - there must be het fx for this to work (otherwise our estimates get biased toward zero because of overfitting to the het variables) - we have to have information about the covariate in the population and the sample (here we used the proportion of people in each het type) Findings: - these two strategies are both unbiased - the design with five sites has half the RMSE of the one-site design. this is because of the variation in the proportions of types across sites. - interestingly there is poor coverage (anti-conservative) when you use the single site design (when you have contextual variation as well, i.e. effect differs across sites for reasons not captured by the het fx, coverage is off for all designs. will keep this point out, seems like too much and you don’t need contextual effects to get different effects across sites, those come from different proportions of types) meta_re_estimator &lt;- function(data){ site_estimates_df &lt;- data %&gt;% group_by(site) %&gt;% do(tidy(lm_robust(Y ~ Z, data = .))) %&gt;% filter(term == &quot;Z&quot;) %&gt;% ungroup meta_fit &lt;- rma(estimate, std.error, data = site_estimates_df, method = &quot;REML&quot;) with(meta_fit, tibble( estimate = as.vector(beta), std.error = se, p.value = pval, conf.low = ci.lb, conf.high = ci.ub)) } post_strat_estimator &lt;- function(data, pr_types_population) { if(length(unique(data$site)) &gt; 1) { fit &lt;- lm_robust(Y ~ Z*as.factor(subject_type) + as.factor(site), data = data) tidy(fit) } else { fit &lt;- lm_robust(Y ~ Z*as.factor(subject_type), data = data) } alpha &lt;- .05 lh_fit &lt;- try({ linearHypothesis( fit, hypothesis.matrix = paste(paste(paste(pr_types_population[91:100][-1], &quot;*&quot;, matchCoefs(fit, &quot;Z&quot;), sep = &quot;&quot;), collapse = &quot; + &quot;), &quot; = 0&quot;), level = 1 - alpha) }) if(!inherits(lh_fit, &quot;try-error&quot;)) { tibble(estimate = drop(attr(lh_fit, &quot;value&quot;)), std.error = sqrt(diag(attr(lh_fit, &quot;vcov&quot;))), df = fit$df.residual, statistic = estimate / std.error, p.value = 2 * pt(abs(statistic), df, lower.tail = FALSE), conf.low = estimate + std.error * qt(alpha / 2, df), conf.high = estimate + std.error * qt(1 - alpha / 2, df)) } else { tibble(error = TRUE) } } # need to have biased sampling to get bias here # two kinds of populations, one in which the study type determines the subject types and you select on study type # a second kind where study type determines study shock # in second type if you adjust for subject type then you will be able to unbiased recover global multi_site_designer &lt;- function( N_sites = 10, n_study_sites = 5, n_subjects_per_site = 1000, feasible_effect = 0, subject_type_effects = seq(from = -0.1, to = 0.1, length.out = 10), pr_types = c( # rows are sites, columns are types 0.005, 0.005, 0.09, 0.15, 0.25, 0.1, 0, 0.1, 0.15, 0.15, 0.1, 0.15, 0.15, 0.15, 0.25, 0.005, 0, 0.1, 0.09, 0.005, 0.15, 0.15, 0.15, 0.005, 0.005, 0, 0.25, 0.09, 0.1, 0.1, 0, 0.15, 0.005, 0.09, 0.005, 0.15, 0.25, 0.1, 0.1, 0.15, 0.005, 0.1, 0.09, 0.25, 0.15, 0.15, 0.005, 0, 0.1, 0.15, 0.005, 0.15, 0.25, 0.1, 0, 0.1, 0.005, 0.15, 0.09, 0.15, 0.15, 0.15, 0.005, 0.25, 0.1, 0.15, 0.09, 0.005, 0.1, 0, 0.25, 0.1, 0.15, 0, 0.005, 0.15, 0.15, 0.1, 0.005, 0.09, 0.005, 0.1, 0.1, 0.15, 0, 0.25, 0.15, 0.09, 0.005, 0.15, 0.005, 0.09, 0.15, 0.1, 0, 0.1, 0.15, 0.005, 0.25, 0.15) ) { declare_population( site = add_level(N = N_sites, feasible_site = sample(c(rep(1, 8), rep(0, 2)), N, replace = FALSE)), subject_types = add_level( N = 10, subject_type = 1:10, subject_type_effect = subject_type_effects, type_proportion = pr_types, N_subjects = ceiling(2500 * type_proportion) ), subjects = add_level(N = N_subjects, noise = rnorm(N)) ) + declare_potential_outcomes(Y ~ Z * (0.1 + subject_type_effect + feasible_effect * feasible_site) + noise) + declare_estimand(ATE_feasible = mean(Y_Z_1 - Y_Z_0), subset = feasible_site == FALSE) + # true effect for feasible sites declare_sampling(clusters = site, strata = feasible_site, strata_n = c(0, n_study_sites)) + declare_sampling(strata = site, n = n_subjects_per_site) + declare_assignment(blocks = site, prob = 0.5) + declare_estimand(study_site_ATE = mean(Y_Z_1 - Y_Z_0)) + declare_estimator(handler = tidy_estimator(post_strat_estimator), pr_types_population = pr_types, label = &quot;post-strat&quot;) } single_site_large_design &lt;- multi_site_designer(n_study_sites = 1, n_subjects_per_site = 2500) small_study_five_sites &lt;- multi_site_designer(n_study_sites = 5, n_subjects_per_site = 500) simulations_small_large &lt;- simulate_design(single_site_large_design, small_study_five_sites, sims = sims) diagnosis_small_large &lt;- diagnose_design(simulations_small_large %&gt;% filter(!is.na(estimate) &amp; !is.na(std.error) &amp; !is.na(statistic) &amp; !is.na(p.value) &amp; !is.na(conf.low) &amp; !is.na(conf.high)), bootstrap_sims = b_sims) kable(get_diagnosands(diagnosis_small_large)) design_label estimand_label estimator_label bias se(bias) rmse se(rmse) power se(power) coverage se(coverage) mean_estimate se(mean_estimate) sd_estimate se(sd_estimate) mean_se se(mean_se) type_s_rate se(type_s_rate) mean_estimand se(mean_estimand) n_sims single_site_large_design ATE_feasible post-strat 0.0031475 0.0119653 0.3629044 0.0129728 0.1025126 0.009576 0.9356784 0.0077135 0.1040090 0.0119606 0.3633932 0.0130575 0.3182932 0.0065550 0.1666667 0.0371110 0.1008615 0.0003499 995 single_site_large_design study_site_ATE post-strat 0.0036542 0.0119708 0.3636432 0.0131462 0.1025126 0.009576 0.9356784 0.0076497 0.1040090 0.0119606 0.3633932 0.0130575 0.3182932 0.0065550 0.1666667 0.0371110 0.1003548 0.0005471 995 small_study_five_sites ATE_feasible post-strat 0.0156817 0.0058686 0.1857540 0.0064505 0.1419940 0.010929 0.9385700 0.0076310 0.1160789 0.0058907 0.1857092 0.0065791 0.1689084 0.0021306 0.0212766 0.0124541 0.1003972 0.0003763 993 small_study_five_sites study_site_ATE post-strat 0.0151117 0.0058942 0.1864589 0.0065325 0.1419940 0.010929 0.9395770 0.0076094 0.1160789 0.0058907 0.1857092 0.0065791 0.1689084 0.0021306 0.0212766 0.0124541 0.1009671 0.0001825 993 16.2.2 Bayesian estimation can improve estimates of effects for sampled sites you can improve site-level effect estimates by analyzing with simple Bayesian model because of its shrinkage property, even when the Bayesian model is wrong about distribution of effects in population this is the point from the blog post; I will modify the above design so it can also make this point, switching between the normal distribution and uniform distribution for the fx distribution stan_model &lt;- &quot; data { int&lt;lower=0&gt; J; // number of sites real y[J]; // estimated effects real&lt;lower=0&gt; sigma[J]; // s.e. of effect estimates } parameters { real mu; real&lt;lower=0&gt; tau; real eta[J]; } transformed parameters { real theta[J]; real tau_sq = tau^2; for (j in 1:J) theta[j] = mu + tau * eta[j]; } model { target += normal_lpdf(eta | 0, 1); target += normal_lpdf(y | theta, sigma); } &quot; stan_re_estimator &lt;- function(data) { site_estimates_df &lt;- data %&gt;% group_by(site) %&gt;% do(tidy(lm_robust(Y ~ Z, data = .))) %&gt;% filter(term == &quot;Z&quot;) %&gt;% ungroup J &lt;- nrow(site_estimates_df) df &lt;- list(J = J, y = site_estimates_df$estimate, sigma = site_estimates_df$std.error) fit &lt;- stan(model_code = stan_model, data = site_estimates_df) fit_sm &lt;- summary(fit)$summary data.frame(estimate = fit_sm[,1][c(&quot;mu&quot;, &quot;tau&quot;, &quot;theta[1]&quot;, &quot;prob_pos&quot;)]) } bayes_estimator &lt;- declare_estimator(handler = stan_re_estimator) 16.2.3 when things break down: confounded sampling none of these designs work when you’re trying to make predictions for sites that are systematically different, i.e. are not in the same population as the sampling frame the design was set up to include several sites where researchers could not feasibly set up experiments. in the original design, effects do not depend on whether sites are feasible for the experiment. when effects do vary, there are systematic differences for those target sites. those differences might come from three sources: mean effect size differs in places that are sampled vs not sampled; individual-level het fx sizes that systematically differ in places that are sampled to study vs others; covariate profiles that do not exist in sites outside the sampling frame. I introduce effects in the first way and show there is substantial bias. small_study_five_sites_feasible_effects &lt;- multi_site_designer(n_study_sites = 5, n_subjects_per_site = 500, feasible_effect = -0.25) simulations_feasible_effects &lt;- simulate_design(small_study_five_sites_feasible_effects, sims = sims) diagnosis_feasible_effects &lt;- diagnose_design(simulations_feasible_effects %&gt;% filter(!is.na(estimate) &amp; !is.na(std.error) &amp; !is.na(statistic) &amp; !is.na(p.value) &amp; !is.na(conf.low) &amp; !is.na(conf.high)), bootstrap_sims = b_sims) kable(get_diagnosands(diagnosis_feasible_effects)) design_label estimand_label estimator_label bias se(bias) rmse se(rmse) power se(power) coverage se(coverage) mean_estimate se(mean_estimate) sd_estimate se(sd_estimate) mean_se se(mean_se) type_s_rate se(type_s_rate) mean_estimand se(mean_estimand) n_sims small_study_five_sites_feasible_effects ATE_feasible post-strat -0.0203957 0.0053320 0.1680045 0.0051913 0.0804829 0.008917 0.9557344 0.0064813 0.0803788 0.0053339 0.1667939 0.0052236 0.163637 0.00196 0.075 0.0315973 0.1007745 0.0003584 994 small_study_five_sites_feasible_effects study_site_ATE post-strat 0.2299906 0.0053397 0.2842747 0.0048958 0.0804829 0.008917 0.6549296 0.0155612 0.0803788 0.0053339 0.1667939 0.0052236 0.163637 0.00196 0.925 0.0315973 -0.1496118 0.0002008 994 Other points I decided to abandon to keep this simple: - tradeoff: context-specific interventions and comparability of intervention effects - tradeoff: comparability and fidelity to context in outcome measurement "],
["putting-designs-to-use.html", "Chapter 17 Putting Designs to Use", " Chapter 17 Putting Designs to Use "],
["before-studies.html", "17.1 Before studies", " 17.1 Before studies 17.1.1 Pre-Analysis Plans 17.1.2 Registered Reports 17.1.3 Standard Operating Procedures 17.1.4 Evaluating and Supporting Research "],
["after-studies.html", "17.2 After studies", " 17.2 After studies 17.2.1 Reconciliation 17.2.2 Replication 17.2.3 Peers: Better scholarly critique 17.2.4 Combining designs Job market papers with multiple studies / three paper paradigm in psych (is it one design targeting same inquiry?) [JC 1p] Multi-site studies – take a design from another study and use it for another one Knowledge accumulation "],
["improving-designs-in-the-social-sciences.html", "17.3 Improving designs in the social sciences", " 17.3 Improving designs in the social sciences 17.3.1 A library of research designs as objects "],
["references-4.html", "References", " References "]
]
